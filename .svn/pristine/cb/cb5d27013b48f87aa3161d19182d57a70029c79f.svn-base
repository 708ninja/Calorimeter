using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Net;

using Ulee.Utils;
using Ulee.Threading;

namespace Hnc.Calorimeter.Client
{
    public class ClientListener : UlThread
    {
        public ClientListener(CalorimeterClient client) : base(false)
        {
            this.client = client;
            Acknowledge = false;

            packet = new ClientReceivePacket(4096);
        }

        private CalorimeterClient client;

        private ClientReceivePacket packet;

        public event EventHandler NotifyTermination;
        private void OnNotifyTermination(object sender, EventArgs args)
        {
            NotifyTermination?.Invoke(sender, args);
        }

        public float[] FValues { get; private set; }

        public UInt16[] NValues { get; private set; }

        public volatile bool Acknowledge;

        public void Lock()
        {
            Monitor.Enter(FValues);
            Monitor.Enter(NValues);
        }

        public void Unlock()
        {
            Monitor.Exit(FValues);
            Monitor.Exit(NValues);
        }


        public void WaitForAck(long time)
        {
            long beginTime = ElapsedMilliseconds;

            while (Acknowledge == false)
            {
                if (IsTimeoutMilliseconds(beginTime, time) == true)
                {
                    throw new Exception("Can't receive acknowledge from Server!");
                }

                Yield();
            }

            Acknowledge = false;
        }

        private void DoDeviceValues()
        {
            lock (FValues)
            {
                for (int i = 0; i < FValues.Length; i++)
                {
                    FValues[i] = BitConverter.ToSingle(packet.Bytes, 17 + i * 4);
                }
            }

            lock (NValues)
            {
                for (int i = 0; i < NValues.Length; i++)
                {
                    NValues[i] = BitConverter.ToUInt16(packet.Bytes, 17 + 388 + i * 2);
                }

            }
        }

        protected override void Execute()
        {
            byte[] bytes;
            IPEndPoint ipPoint = new IPEndPoint(IPAddress.Any, 0);

            // Thread 종료 신호가 들어올때 까지 루프
            while (Terminated == false)
            {
                if (client.Udp != null)
                {
                    lock (client.Udp)
                    {
                        if (client.Udp.Available > 1)
                        {
                            bytes = client.Udp.Receive(ref ipPoint);

                            if (ipPoint.ToString() == client.IpPoint.ToString())
                            {
                                packet.Clear();
                                Array.Copy(bytes, 0, packet.Bytes, 0, bytes.Length);

                                switch (packet.Command)
                                {
                                    case EServerCommand.Acknowledge:
                                        Acknowledge = true;
                                        break;

                                    case EServerCommand.DeviceValues:
                                        DoDeviceValues();
                                        break;

                                    case EServerCommand.ClientList:
                                        break;

                                    case EServerCommand.NotifyTermination:
                                        OnNotifyTermination(this, null);
                                        break;
                                }
                            }
                        }
                    }
                }

                // 제어권 양보
                Yield();
            }
        }
    }

    public class ClientReceivePacket
    {
        public ClientReceivePacket(int length)
        {
            packet = new UlBinSets(length);
        }

        public EServerCommand Command
        {
            get { return (EServerCommand)packet.Byte(0); }
            set { packet.Byte(0, (byte)value); }
        }

        public int IArg1
        {
            get { return (int)packet.DWord(1); }
            set { packet.DWord(1, (UInt32)value); }
        }

        public int IArg2
        {
            get { return (int)packet.DWord(5); }
            set { packet.DWord(5, (UInt32)value); }
        }

        public int IArg3
        {
            get { return (int)packet.DWord(9); }
            set { packet.DWord(9, (UInt32)value); }
        }

        public int IArg4
        {
            get { return (int)packet.DWord(13); }
            set { packet.DWord(13, (UInt32)value); }
        }

        private UlBinSets packet;

        public void Clear()
        {
            packet.Clear();
        }

        public byte[] Bytes
        { get { return packet.Bytes; } }

        public int Length
        { get { return packet.Count; } }
    }
}
