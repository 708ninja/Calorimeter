using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using FirebirdSql.Data.FirebirdClient;

using Ulee.Device.Connection.Yokogawa;
using Ulee.DllImport.Win32;
using Ulee.Threading;
using Ulee.Utils;

namespace Hnc.Calorimeter.Client
{
    public enum ETestMessage
    {
        None,
        Next,
        Reset
    }

    public enum ETestStep
    {
        None,
        Preparation,
        Judgement,
        Integration
    }

    public enum EWorkSheet
    {
        Title,
        I1,
        I2,
        I3,
        I4,
        I5,
        I6,
        I7
    }

    public class TestDescriptionArgs : EventArgs
    {
        public TestDescriptionArgs()
        {
            Name = "None";
            Step = ETestStep.None;
        }

        public string Name { get; set; }
        public ETestStep Step { get; set; }
        public long ElapsedTime { get; set; }
        public long TotalElapsedTime { get; set; }
        public long PrepareCurTime { get; set; }
        public long PrepareMaxTime { get; set; }
        public long JudgeCurTime { get; set; }
        public long JudgeMaxTime { get; set; }
        public long IntegCurTime { get; set; }
        public long IntegMaxTime { get; set; }
        public int JudgeCount { get; set; }
        public int JudgeMax { get; set; }
        public int RepeatCount { get; set; }
        public int RepeatMax { get; set; }
        public int ScheduleCount { get; set; }
        public int ScheduleMax { get; set; }
    }

    public class TestSpreadSheetArgs : EventArgs
    {
        public TestSpreadSheetArgs()
        {
            Index = EWorkSheet.Title;
            SettingAverage = false;
            Report = null;
        }

        public EWorkSheet Index { get; set; }
        public bool SettingAverage { get; set; }
        public TestReport Report { get; set; }
    }

    public class ToggleButtonStateArgs: EventArgs
    {
        public ToggleButtonStateArgs(bool enabled)
        {
            Enabled = enabled;
        }

        public bool Enabled { get; set; }
    }

    public class CalorimeterTestThread : UlThread
    {
        public CalorimeterTestThread(TestContext context) : base(false, true)
        {
            this.context = context;
            this.prevRawTicks = 0;
            this.descArgs = new TestDescriptionArgs();
            this.sheetArgs = new TestSpreadSheetArgs();

            Priority = ThreadPriority.Highest;
        }

        private const int csInvalidTime = 1000;
        private const int csOneMiniteMsec = 60000;

        private long prevRawTicks;
        private TestContext context;
        private TestDescriptionArgs descArgs;
        private TestSpreadSheetArgs sheetArgs;

        public event EventHandler ClearSpreadSheet = null;
        protected void OnClearSpreadSheet()
        {
            ClearSpreadSheet?.Invoke(null, null);
        }

        public event EventHandler SetSpreadSheet = null;
        protected void OnSetSpreadSheet()
        {
            SetSpreadSheet?.Invoke(null, sheetArgs);
        }

        public event EventHandler DispState = null;
        protected void OnDispState()
        {
            DispState?.Invoke(null, descArgs);
        }

        public event EventBoolHandler SetToggleButtonState = null;
        protected void OnSetToggleButtonState(bool enabled)
        {
            SetToggleButtonState?.Invoke(null, enabled);
        }

        protected override void Execute()
        {
            Watch.Stop();

            TestValue value = context.Value;
            ConditionMethod method = context.Condition.Method;
            List<ConditionSchedule> schedules = context.Condition.Schedules;

            try
            {
                descArgs.ScheduleCount = 0;
                descArgs.ScheduleMax = schedules.Count;

                for (int i = 0; i < schedules.Count; i++)
                {
                    context.Index = i;
                    context.Report.Initialize();

                    ConditionSchedule sch = schedules[i];
                    value.Integral.Initialize(method.ScanTime, method.IntegralTime, sch);

                    descArgs.Name = sch.Name;
                    descArgs.Step = ETestStep.None;
                    descArgs.RepeatMax = sch.Repeat;
                    descArgs.ScheduleCount = i + 1;

                    for (int j = 0; j < sch.Repeat; j++)
                    {
                        value.Integral.Clear();
                        context.Report.Clear();

                        OnClearSpreadSheet();

                        sheetArgs.Index = EWorkSheet.Title;
                        sheetArgs.Report = context.Report;
                        OnSetSpreadSheet();

                        descArgs.RepeatCount = j + 1;
                        descArgs.JudgeMax = sch.NoOfSteady;
                        descArgs.JudgeCount = 0;
                        descArgs.JudgeMaxTime = sch.Judge * csOneMiniteMsec;
                        descArgs.JudgeCurTime = 0;
                        descArgs.IntegMaxTime = method.IntegralTime * method.IntegralCount * csOneMiniteMsec;
                        descArgs.IntegCurTime = 0;

                        InsertDataHead();

                        prevRawTicks = 0;
                        context.Value.Saving = true;
                        Watch.Restart();

                        DoPreparation(sch);
                        DoJudgement(sch);
                        DoIntegration(method);

                        InsertAllDataRaw();

                        Watch.Stop();
                        context.Value.Saving = false;
                    }
                }

                PostMessage(Resource.WM_TEST_NORMAL_TERMINATED);
            }
            catch (UlThreadTerminatedException)
            {
                PostMessage(Resource.WM_TEST_ABNORMAL_TERMINATED);
            }
        }

        private void PostMessage(int msg, int wParam=0, int lParam=0)
        {
            Win32.PostMessage(context.WndHandle, msg, (IntPtr)wParam, (IntPtr)lParam);
        }

        private void DoPreparation(ConditionSchedule sch)
        {
            bool repeat = true;
            descArgs.Step = ETestStep.Preparation;

            while (repeat == true)
            {
                try
                {
                    descArgs.Step = ETestStep.Preparation;
                    descArgs.PrepareMaxTime = sch.PreRun * csOneMiniteMsec;
                    descArgs.PrepareCurTime = 0;
                    OnDispState();

                    Preparation();
                    repeat = false;
                }
                catch (UlThreadTerminatedException e) 
                {
                    switch ((ETestMessage)e.Code)
                    {
                        case ETestMessage.None:
                            throw e;

                        case ETestMessage.Next:
                            repeat = false;
                            break;

                        case ETestMessage.Reset:
                            repeat = true;
                            break;
                    }
                }
            }
        }

        private void Preparation()
        {
            long ticks;
            long maxTicks = descArgs.PrepareMaxTime;
            long prevTicks = ElapsedMilliseconds;
            long startTicks = prevTicks;

            while (Terminated == false)
            {
                ticks = ElapsedMilliseconds;

                if (IsTimeoutMilliseconds(prevTicks, csInvalidTime) == true)
                {
                    prevTicks += csInvalidTime;
                    descArgs.ElapsedTime = ticks - startTicks;
                    descArgs.TotalElapsedTime = ticks;
                    descArgs.PrepareCurTime = descArgs.ElapsedTime;
                    OnDispState();

                    DecideJudgement();
                }

                if (IsTimeoutMilliseconds(startTicks, maxTicks) == true)
                {
                    descArgs.PrepareCurTime = maxTicks;
                    break;
                }

                DoSaveDataRaw();
                Yield();
            }
        }

        private void DoJudgement(ConditionSchedule sch)
        {
            bool repeat = true;

            try
            {
                while (repeat == true)
                {
                    try
                    {
                        descArgs.Step = ETestStep.Judgement;
                        descArgs.JudgeMax = sch.NoOfSteady;
                        descArgs.JudgeCount = 0;
                        descArgs.JudgeMaxTime = sch.Judge * csOneMiniteMsec;
                        descArgs.JudgeCurTime = 0;
                        OnDispState();

                        Judgement();
                        repeat = false;
                    }
                    catch (UlThreadTerminatedException e)
                    {
                        switch ((ETestMessage)e.Code)
                        {
                            case ETestMessage.None:
                                throw e;

                            case ETestMessage.Next:
                                repeat = false;
                                break;

                            case ETestMessage.Reset:
                                repeat = true;
                                break;
                        }
                    }

                }
            }
            finally
            {
                context.Value.Integral.Clear("Judge");
            }
        }

        private void Judgement()
        {
            long ticks;
            long maxTicks = descArgs.JudgeMaxTime;
            long prevTicks = ElapsedMilliseconds;
            long startTicks = prevTicks;

            while (Terminated == false)
            {
                ticks = ElapsedMilliseconds;

                if (IsTimeoutMilliseconds(prevTicks, csInvalidTime) == true)
                {
                    prevTicks += csInvalidTime;
                    descArgs.ElapsedTime = ticks - startTicks;
                    descArgs.TotalElapsedTime = ticks;
                    descArgs.JudgeCurTime = descArgs.ElapsedTime;
                    OnDispState();

                    DecideJudgement();
                    if (IsSteadyAll() == true) descArgs.JudgeCount++;
                }

                if (descArgs.JudgeCount >= descArgs.JudgeMax) break;

                if (IsTimeoutMilliseconds(startTicks, maxTicks) == true)
                {
                    if (Resource.Settings.Options.ForcedInteg == true)
                    {
                        descArgs.JudgeCurTime = maxTicks;
                        break;
                    }
                    else
                    {
                        throw new UlThreadTerminatedException((int)ETestMessage.Reset);
                    }
                }

                DoSaveDataRaw();
                Yield();
            }
        }

        private bool IsSteadyAll()
        {
            IntegralValues values = context.Value.Integral["Judge"];

            foreach (KeyValuePair<string, IntegralValue> row in values.Values)
            {
                if (row.Value.State == EValueState.Ng) return false;
            }

            return true;
        }

        private void DoIntegration(ConditionMethod method)
        {
            bool repeat = true;

            OnSetToggleButtonState(false);

            while (repeat == true)
            {
                try
                {
                    context.Value.Integral.Clear();

                    descArgs.Step = ETestStep.Integration;
                    descArgs.ElapsedTime = 0;
                    descArgs.IntegMaxTime = method.IntegralTime * method.IntegralCount * csOneMiniteMsec;
                    descArgs.IntegCurTime = 0;
                    OnDispState();

                    Integration(method);
                    repeat = false;
                }
                catch (UlThreadTerminatedException e)
                {
                    switch ((ETestMessage)e.Code)
                    {
                        case ETestMessage.None:
                            throw e;

                        case ETestMessage.Next:
                            repeat = false;
                            break;

                        case ETestMessage.Reset:
                            repeat = true;
                            break;
                    }
                }
            }

            OnSetToggleButtonState(true);
        }

        private void Integration(ConditionMethod method)
        {
            long ticks;
            long maxTicks = descArgs.IntegMaxTime;
            long prevTicks = ElapsedMilliseconds;
            long integPrevTicks = prevTicks;
            long startTicks = prevTicks;
            long integTime = method.IntegralTime * csOneMiniteMsec;
            int integCount = 0;
            int integMaxCount = method.IntegralCount;

            while (Terminated == false)
            {
                ticks = ElapsedMilliseconds;

                if (IsTimeoutMilliseconds(prevTicks, csInvalidTime) == true)
                {
                    prevTicks += csInvalidTime;
                    descArgs.ElapsedTime = ticks - startTicks;
                    descArgs.TotalElapsedTime = ticks;
                    descArgs.IntegCurTime = descArgs.ElapsedTime;
                    OnDispState();

                    DispValues(integCount);
                    Integrate();
                }

                if (IsTimeoutMilliseconds(integPrevTicks, integTime) == true)
                {
                    SetIntegralValuesToReport(integCount);
                    DispIntegralValues(integCount);
                    InsertDataValue(integCount);

                    integPrevTicks += integTime;
                    integCount++;
                }

                if (IsTimeoutMilliseconds(startTicks, maxTicks) == true)
                {
                    descArgs.IntegCurTime = maxTicks;
                    break;
                }

                DoSaveDataRaw();
                Yield();
            }
        }

        private void DecideJudgement()
        {
            TestValue value = context.Value;

            value.Lock();
            try
            {
                value.Integral.IntegrateSheet("Judge");
            }
            finally
            {
                value.Unlock();
            }
        }

        private void Integrate()
        {
            TestValue value = context.Value;

            value.Lock();
            try
            {
                value.Integral.Integrate("Judge");
            }
            finally
            {
                value.Unlock();
            }
        }

        private void DispValues(int index)
        {
            context.Value.Lock();

            try
            {
                foreach (KeyValuePair<string, ReportSheet> sheet in sheetArgs.Report.ValueSheets)
                {
                    sheet.Value.RefreshData(index);
                }
            }
            finally
            {
                context.Value.Unlock();
            }

            sheetArgs.Index = (EWorkSheet)index + 1;
            sheetArgs.SettingAverage = false;
            OnSetSpreadSheet();
        }

        private void DispIntegralValues(int index)
        {
            sheetArgs.Index = (EWorkSheet)index + 1;
            sheetArgs.SettingAverage = true;
            OnSetSpreadSheet();
        }

        private void SetIntegralValuesToReport(int index)
        {
            TestValue value = context.Value;
            Dictionary<string, ReportSheet> reportSheet = sheetArgs.Report.ValueSheets;

            value.Lock();

            try
            {
                foreach (KeyValuePair<string, IntegralValues> integSheet in value.Integral.Sheets)
                {
                    if (integSheet.Key == "Judge") continue;
                    if (reportSheet[integSheet.Key].Use == false) continue;

                    foreach (KeyValuePair<string, IntegralValue> integValue in integSheet.Value.Values)
                    {
                        reportSheet[integSheet.Key].Rows[integValue.Key].Cells[index].Raw =
                            integValue.Value.AverageSum;
                    }
                }
            }
            finally
            {
                value.Unlock();
            }
        }

        private void DoSaveDataRaw()
        {
            if (IsTimeoutMilliseconds(prevRawTicks, csInvalidTime) == true)
            {
                prevRawTicks += csInvalidTime;

                if (context.Report.DataRaw.HalfFull == true)
                {
                    InsertHalfFullDataRaw();
                }
            }
        }

        private void InsertDataValue(int index)
        {
            TestValue value = context.Value;
            TestDataSets sets = Resource.Db.TestSets[context.Handle];

            Resource.Db.Lock();

            try
            {
                value.Lock();
                FbTransaction trans = Resource.Db.BeginTrans();

                try
                {
                    foreach (KeyValuePair<string, ReportSheet> sheet in sheetArgs.Report.ValueSheets)
                    {
                        if (sheet.Value.Use == false) continue;

                        foreach (KeyValuePair<string, ReportRow> row in sheet.Value.Rows)
                        {
                            SetDataValue(index, row.Value);
                            sets.DataValueSet.Insert(trans);
                        }
                    }

                    Resource.Db.CommitTrans();
                }
                catch (Exception e)
                {
                    Resource.TLog.Log((int)ELogItem.Exception, e.ToString());
                    Resource.Db.RollbackTrans();
                }
                finally
                {
                    value.Unlock();
                }
            }
            finally
            {
                Resource.Db.Unlock();
            }
        }

        private void InsertHalfFullDataRaw()
        {
            DataRaw raw = null;
            TestDataSets sets = Resource.Db.TestSets[context.Handle];

            Resource.Db.Lock();

            try
            {
                context.Value.Lock();
                FbTransaction trans = Resource.Db.BeginTrans();

                try
                {
                    for (int i = 0; i < context.Report.DataRaw.Count; i++)
                    {
                        raw = context.Report.DataRaw.HalfFullDataRaw;
                        if (raw == null) break;

                        ValueStorageRaw storageRaw = raw.Row.Storage.HalfFullValues;

                        if (raw.RecNo < 0)
                        {
                            InsertDataRawUnit(trans, sets.DataRawUnitSet, raw);
                        }

                        InsertDataRaw(trans, sets.DataRawSet, storageRaw, raw.RecNo);
                    }

                    Resource.Db.CommitTrans();
                }
                catch (Exception e)
                {
                    Resource.TLog.Log((int)ELogItem.Exception, e.ToString());
                    Resource.Db.RollbackTrans();
                }
                finally
                {
                    context.Value.Unlock();
                }
            }
            finally
            {
                Resource.Db.Unlock();
            }
        }

        private void InsertAllDataRaw()
        {
            DataRaw raw = null;
            TestDataSets sets = Resource.Db.TestSets[context.Handle];

            Resource.Db.Lock();

            try
            {
                context.Value.Lock();
                FbTransaction trans = Resource.Db.BeginTrans();

                try
                {
                    ValueStorageRaw storageRaw;

                    foreach (KeyValuePair<string, DataRaw> dataRaw in context.Report.DataRaw.Rows)
                    {
                        raw = dataRaw.Value;

                        if (raw.Row.Storage.HalfFull == true)
                        {
                            storageRaw = raw.Row.Storage.HalfFullValues;

                            if (raw.RecNo < 0)
                            {
                                InsertDataRawUnit(trans, sets.DataRawUnitSet, raw);
                            }

                            InsertDataRaw(trans, sets.DataRawSet, storageRaw, raw.RecNo);
                        }

                        storageRaw = raw.Row.Storage.CurrentValues;
                        if (storageRaw != null)
                        {
                            if (raw.RecNo < 0)
                            {
                                InsertDataRawUnit(trans, sets.DataRawUnitSet, raw);
                            }

                            InsertDataRaw(trans, sets.DataRawSet, storageRaw, raw.RecNo);
                        }
                    }

                    Resource.Db.CommitTrans();
                }
                catch (Exception e)
                {
                    Resource.TLog.Log((int)ELogItem.Exception, e.ToString());
                    Resource.Db.RollbackTrans();
                }
                finally
                {
                    context.Value.Unlock();
                }
            }
            finally
            {
                Resource.Db.Unlock();
            }
        }

        private void InsertDataRawUnit(FbTransaction trans, DataRawUnitDataSet set, DataRaw raw)
        {
            raw.RecNo = Resource.Db.GetGenNo("GN_DATARAWUNIT");

            set.RecNo = raw.RecNo;
            set.DataBookNo = context.Report.RecNo;
            set.DataName = raw.Row.Name;
            set.UnitType = (int)raw.Row.Unit.Type;
            set.UnitFrom = (int)raw.Row.Unit.From;
            set.UnitTo = (int)raw.Row.Unit.To;
            set.Insert(trans);
        }

        private void InsertDataRaw(FbTransaction trans, DataRawDataSet set, ValueStorageRaw storageRaw, Int64 rawUnitNo)
        {
            set.RecNo = Resource.Db.GetGenNo("GN_DATARAW");
            set.DataRawUnitNo = rawUnitNo;
            set.RegTime = storageRaw.RegTime.ToString(Resource.csDateTimeFormat);
            set.ScanTime = context.Report.Method.ScanTime;
            set.DataRaw = ExtractDataRaw(storageRaw.RawValues, set.ScanTime);
            set.Insert(trans);
        }

        private void InsertDataHead()
        {
            TestDataSets sets = Resource.Db.TestSets[context.Handle];

            Resource.Db.Lock();
            try
            {
                FbTransaction trans = Resource.Db.BeginTrans();

                try
                {
                    SetDataBook();
                    sets.DataBookSet.Insert(trans);

                    foreach (KeyValuePair<string, ReportSheet> sheet in context.Report.ValueSheets)
                    {
                        SetDataSheet(context.Report.RecNo, sheet.Key, sheet.Value);
                        sets.DataSheetSet.Insert(trans);

                        foreach (KeyValuePair<string, ReportRow> row in sheet.Value.Rows)
                        {
                            if (row.Value != null)
                            {
                                SetDataValueUnit(sheet.Value.RecNo, row.Key, row.Value);
                                sets.DataValueUnitSet.Insert(trans);
                            }
                        }
                    }

                    Resource.Db.CommitTrans();
                }
                catch (Exception e)
                {
                    Resource.TLog.Log((int)ELogItem.Exception, e.ToString());
                    Resource.Db.RollbackTrans();
                }
            }
            finally
            {
                Resource.Db.Unlock();
            }
        }

        private void SetDataBook()
        {
            ValueRow row;
            ConditionNote note = context.Report.Note;
            ConditionRated rated = context.Report.Rated;
            ConditionMethod method = context.Report.Method;
            DataBookDataSet set = Resource.Db.TestSets[context.Handle].DataBookSet;
            context.Report.RecNo = Resource.Db.GetGenNo("GN_DATABOOK");
            context.Report.RegTime = DateTime.Now;

            set.RecNo = context.Report.RecNo;
            set.UserNo = Resource.UserNo;
            set.BeginTime = context.Report.RegTime.ToString(Resource.csDateTimeFormat);
            set.EndTime = set.BeginTime;
            set.TestLine = context.Handle;
            set.IntegCount = method.IntegralCount;
            set.IntegTime = method.IntegralTime;
            set.ScanTime = method.ScanTime;
            set.Company = note.Company;
            set.TestName = note.Name;
            set.TestNo = note.No;
            set.Observer = note.Observer;
            set.Maker = note.Maker;
            set.Model1 = note.Model1;
            set.Serial1 = note.Serial1;
            set.Model2 = note.Model2;
            set.Serial2 = note.Serial2;
            set.Model3 = note.Model3;
            set.Serial3 = note.Serial3;
            set.ExpDevice = note.ExpDevice;
            set.Refrige = note.Refrigerant;
            set.RefCharge = note.RefCharge;
            row = context.Value.Calcurated["Total.Capacity"];
            set.Capacity = $"{rated.Capacity.ToString(row.Format)} {row.Unit.ToDescription}";
            row = context.Value.Calcurated["Total.Power"];
            set.PowerInput = $"{rated.PowerInput.ToString(row.Format)} {row.Unit.ToDescription}";
            row = context.Value.Calcurated["Total.EER_COP"];
            set.EER_COP = $"{rated.EER_COP.ToString(row.Format)} {row.Unit.ToDescription}";
            set.PowerSource = $"{rated.Voltage}V / {rated.Current}A / {rated.Frequency}Hz / {EnumHelper.GetNames<EWT330Wiring>()[(int)rated.Wiring]}";
            set.State = ETestState.Testing;
        }

        private void SetDataSheet(Int64 dataBookNo, string key, ReportSheet sheet)
        {
            DataSheetDataSet set = Resource.Db.TestSets[context.Handle].DataSheetSet;
            sheet.RecNo = Resource.Db.GetGenNo("GN_DATASHEET");

            set.RecNo = sheet.RecNo;
            set.DataBookNo = dataBookNo;
            set.SheetName = key;
            set.Use = sheet.Use;
            set.IDTemp = $"{sheet.IndoorDB:f2} / {sheet.IndoorWB:f2} ℃";
            set.IDState = $"{sheet.IndoorUse}, {sheet.IndoorMode}";
            set.ODTemp = $"{sheet.OutdoorDB:f2} / {sheet.OutdoorWB:f2} ℃";
            set.ODState = $"{sheet.OutdoorUse}";
            set.NozzleName = sheet.NozzleName;
            set.NozzleState = sheet.NozzleState;
        }

        private void SetDataValueUnit(Int64 sheetNo, string key, ReportRow row)
        {
            DataValueUnitDataSet set = Resource.Db.TestSets[context.Handle].DataValueUnitSet;
            row.RecNo = Resource.Db.GetGenNo("GN_DATAVALUEUNIT");

            set.RecNo = row.RecNo;
            set.DataSheetNo = sheetNo;
            set.ValueName = key;
            set.UnitType = (int)row.Row.Unit.Type;
            set.UnitFrom = (int)row.Row.Unit.From;
            set.UnitTo = (int)row.Row.Unit.To;
        }

        private void SetDataValue(int index, ReportRow row)
        {
            DataValueDataSet set = Resource.Db.TestSets[context.Handle].DataValueSet;

            set.RecNo = Resource.Db.GetGenNo("GN_DATAVALUE");
            set.DataValueUnitNo = row.RecNo;
            set.DataNo = index;
            set.DataValue = row.Cells[index].Raw;
        }

        private float[] ExtractDataRaw(float[] raws, int count)
        {
            int loopCount = raws.Length / count;

            if ((raws.Length%count) != 0) loopCount++;

            float[] newRaws = new float[loopCount];

            for (int i = 0; i < loopCount; i++)
            {
                newRaws[i] = raws[i*count];
            }

            return newRaws;
        }
    }
}
