using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;

using Ulee.Controls;
using Ulee.Utils;
using DevExpress.XtraEditors.Repository;

namespace Hnc.Calorimeter.Client
{ 
    public partial class CtrlConfigSchedule : UlUserControlEng
    {
        private class ChamberParams
        {
            public ChamberParams()
            {
                Indoor1Use = EIndoorUse.Indoor;
                Indoor1Mode1 = EIndoorMode.Cooling;
                Indoor1Duct1 = EIndoorDuct.N1;
                Indoor1Mode2 = EIndoorMode.Cooling;
                Indoor1Duct2 = EIndoorDuct.N1;

                Indoor2Use = EIndoorUse.Indoor;
                Indoor2Mode1 = EIndoorMode.Cooling;
                Indoor2Duct1 = EIndoorDuct.N1;
                Indoor2Mode2 = EIndoorMode.Cooling;
                Indoor2Duct2 = EIndoorDuct.N1;

                OutdoorUse = EOutdoorUse.Outdoor;
                OutdoorDpSensor = EEtcUse.Use;
                OutdoorAutoVolt = EEtcUse.Use;
            }

            public EIndoorUse Indoor1Use { get; set; }
            public EIndoorMode Indoor1Mode1 { get; set; }
            public EIndoorDuct Indoor1Duct1 { get; set; }
            public EIndoorMode Indoor1Mode2 { get; set; }
            public EIndoorDuct Indoor1Duct2 { get; set; }
            public EIndoorUse Indoor2Use { get; set; }
            public EIndoorMode Indoor2Mode1 { get; set; }
            public EIndoorDuct Indoor2Duct1 { get; set; }
            public EIndoorMode Indoor2Mode2 { get; set; }
            public EIndoorDuct Indoor2Duct2 { get; set; }
            public EOutdoorUse OutdoorUse { get; set; }
            public EEtcUse OutdoorDpSensor { get; set; }
            public EEtcUse OutdoorAutoVolt { get; set; }
        }

        public CtrlConfigSchedule()
        {
            InitializeComponent();
            Initialize();
        }

        private EDataSetMode mode;
        private GridBookmark bookmark;

        private List<TextEdit> viewEdits;
        private List<TextEdit> id1Edits;
        private List<TextEdit> id2Edits;
        private List<TextEdit> odEdits;
        private List<AdvBandedGridView> viewGrids;
        private List<ChamberParams> chamberParams;

        private void Initialize()
        {
            mode = EDataSetMode.View;
            bookmark = new GridBookmark(scheduleGridView);

            viewEdits = new List<TextEdit>();
            viewEdits.Add(standardEdit);
            viewEdits.Add(nameEdit);
            viewEdits.Add(noSteadyEdit);
            viewEdits.Add(preparationEdit);
            viewEdits.Add(judgementEdit);
            viewEdits.Add(repeatEdit);

            id1Edits = new List<TextEdit>();
            id1Edits.Add(id1EdbSetupEdit);
            id1Edits.Add(id1EdbAvgEdit);
            id1Edits.Add(id1EdbDevEdit);
            id1Edits.Add(id1EwbSetupEdit);
            id1Edits.Add(id1EwbAvgEdit);
            id1Edits.Add(id1EwbDevEdit);
            id1Edits.Add(id1Ldb1DevEdit);
            id1Edits.Add(id1Lwb1DevEdit);
            id1Edits.Add(id1Airflow1DevEdit);
            id1Edits.Add(id1Ldb2DevEdit);
            id1Edits.Add(id1Lwb2DevEdit);
            id1Edits.Add(id1Airflow2DevEdit);
            id1Edits.Add(id1Cdp1SetupEdit);
            id1Edits.Add(id1Cdp1AvgEdit);
            id1Edits.Add(id1Cdp1DevEdit);
            id1Edits.Add(id1Cdp2SetupEdit);
            id1Edits.Add(id1Cdp2AvgEdit);
            id1Edits.Add(id1Cdp2DevEdit);

            id2Edits = new List<TextEdit>();
            id2Edits.Add(id2EdbSetupEdit);
            id2Edits.Add(id2EdbAvgEdit);
            id2Edits.Add(id2EdbDevEdit);
            id2Edits.Add(id2EwbSetupEdit);
            id2Edits.Add(id2EwbAvgEdit);
            id2Edits.Add(id2EwbDevEdit);
            id2Edits.Add(id2Ldb1DevEdit);
            id2Edits.Add(id2Lwb1DevEdit);
            id2Edits.Add(id2Airflow1DevEdit);
            id2Edits.Add(id2Ldb2DevEdit);
            id2Edits.Add(id2Lwb2DevEdit);
            id2Edits.Add(id2Airflow2DevEdit);
            id2Edits.Add(id2Cdp1SetupEdit);
            id2Edits.Add(id2Cdp1AvgEdit);
            id2Edits.Add(id2Cdp1DevEdit);
            id2Edits.Add(id2Cdp2SetupEdit);
            id2Edits.Add(id2Cdp2AvgEdit);
            id2Edits.Add(id2Cdp2DevEdit);

            odEdits = new List<TextEdit>();
            odEdits.Add(odEdbSetupEdit);
            odEdits.Add(odEdbAvgEdit);
            odEdits.Add(odEdbDevEdit);
            odEdits.Add(odEwbSetupEdit);
            odEdits.Add(odEwbAvgEdit);
            odEdits.Add(odEwbDevEdit);
            odEdits.Add(odEdpSetupEdit);
            odEdits.Add(odEdpAvgEdit);
            odEdits.Add(odEdpDevEdit);
            odEdits.Add(odVolt1SetupEdit);
            odEdits.Add(odVolt1AvgEdit);
            odEdits.Add(odVolt1DevEdit);
            odEdits.Add(odVolt2SetupEdit);
            odEdits.Add(odVolt2AvgEdit);
            odEdits.Add(odVolt2DevEdit);

            viewGrids = new List<AdvBandedGridView>();
            viewGrids.Add(indoor1GridView);
            viewGrids.Add(indoor2GridView);
            viewGrids.Add(outdoorGridView);

            chamberParams = new List<ChamberParams>();
            chamberParams.Add(new ChamberParams());

            indoor1Grid.DataSource = chamberParams;
            indoor2Grid.DataSource = chamberParams;
            outdoorGrid.DataSource = chamberParams;

            NameValue<EIndoorUse>[] inUseItems = EnumHelper.GetNameValues<EIndoorUse>();
            indoor1UseLookUp.DataSource = inUseItems;
            indoor1UseLookUp.DisplayMember = "Name";
            indoor1UseLookUp.ValueMember = "Value";
            indoor1UseLookUp.KeyMember = "Value";
            indoor2UseLookUp.DataSource = inUseItems;
            indoor2UseLookUp.DisplayMember = "Name";
            indoor2UseLookUp.ValueMember = "Value";
            indoor2UseLookUp.KeyMember = "Value";

            NameValue<EIndoorMode>[] modeItems = EnumHelper.GetNameValues<EIndoorMode>();
            indoor1ModeLookUp.DataSource = modeItems;
            indoor1ModeLookUp.DisplayMember = "Name";
            indoor1ModeLookUp.ValueMember = "Value";
            indoor1ModeLookUp.KeyMember = "Value";
            indoor2ModeLookUp.DataSource = modeItems;
            indoor2ModeLookUp.DisplayMember = "Name";
            indoor2ModeLookUp.ValueMember = "Value";
            indoor2ModeLookUp.KeyMember = "Value";

            NameValue<EIndoorDuct>[] ductItems = EnumHelper.GetNameValues<EIndoorDuct>();
            indoor1DuctLookUp.DataSource = ductItems;
            indoor1DuctLookUp.DisplayMember = "Name";
            indoor1DuctLookUp.ValueMember = "Value";
            indoor1DuctLookUp.KeyMember = "Value";
            indoor2DuctLookUp.DataSource = ductItems;
            indoor2DuctLookUp.DisplayMember = "Name";
            indoor2DuctLookUp.ValueMember = "Value";
            indoor2DuctLookUp.KeyMember = "Value";

            NameValue<EOutdoorUse>[] outUseItems = EnumHelper.GetNameValues<EOutdoorUse>();
            outdoorUseLookUp.DataSource = outUseItems;
            outdoorUseLookUp.DisplayMember = "Name";
            outdoorUseLookUp.ValueMember = "Value";
            outdoorUseLookUp.KeyMember = "Value";

            NameValue<EEtcUse>[] etcUseItems = EnumHelper.GetNameValues<EEtcUse>();
            outdoorEtcUseLookUp.DataSource = etcUseItems;
            outdoorEtcUseLookUp.DisplayMember = "Name";
            outdoorEtcUseLookUp.ValueMember = "Value";
            outdoorEtcUseLookUp.KeyMember = "Value";

            string format;
            string devFormat;

            foreach (TextEdit edit in id1Edits)
            {
                switch (int.Parse(((string)edit.Tag).ToString()))
                {
                    // Temperature Edit
                    case 0:
                        format = Resource.Variables.Measured["ID11.Entering.DB"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    // Air Flow Edit
                    case 1:
                        format = Resource.Variables.Calcurated["ID11.Air.Flow.Lev"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    // Diff. Pressure Edit
                    case 2:
                        format = Resource.Variables.Measured["ID11.Nozzle.Diff.Pressure"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    default:
                        format = "0.0";
                        devFormat = "f1";
                        break;
                }

                edit.Text = format;
                edit.Properties.Mask.EditMask = devFormat;
                edit.Properties.DisplayFormat.FormatString = devFormat;
                edit.Properties.EditFormat.FormatString = devFormat;
            }

            foreach (TextEdit edit in id2Edits)
            {
                switch (int.Parse(((string)edit.Tag).ToString()))
                {
                    // Temperature Edit
                    case 0:
                        format = Resource.Variables.Measured["ID21.Entering.DB"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    // Air Flow Edit
                    case 1:
                        format = Resource.Variables.Calcurated["ID21.Air.Flow.Lev"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    // Diff. Pressure Edit
                    case 2:
                        format = Resource.Variables.Measured["ID21.Nozzle.Diff.Pressure"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    default:
                        format = "0.0";
                        devFormat = "f1";
                        break;
                }

                edit.Text = format;
                edit.Properties.Mask.EditMask = devFormat;
                edit.Properties.DisplayFormat.FormatString = devFormat;
                edit.Properties.EditFormat.FormatString = devFormat;
            }

            foreach (TextEdit edit in odEdits)
            {
                switch (int.Parse(((string)edit.Tag).ToString()))
                {
                    // Temperature Edit
                    case 0:
                        format = Resource.Variables.Measured["OD.Entering.DB"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    // Air Flow Edit
                    case 1:
                        format = Resource.Variables.Calcurated["PM.Voltage"].Format;
                        devFormat = ToDevFormat(format);
                        break;

                    default:
                        format = "0.0";
                        devFormat = "f1";
                        break;
                }

                edit.Text = format;
                edit.Properties.Mask.EditMask = devFormat;
                edit.Properties.DisplayFormat.FormatString = devFormat;
                edit.Properties.EditFormat.FormatString = devFormat;
            }
        }

        private void CtrlConfigSchedule_Load(object sender, EventArgs e)
        {
            Resource.Db.ScheduleParamSet.Select();

            scheduleGrid.DataSource = Resource.Db.ScheduleParamSet.DataSet.Tables[0];
            scheduleGridView.Appearance.EvenRow.BackColor = Color.FromArgb(244, 244, 236);
            scheduleGridView.OptionsView.EnableAppearanceEvenRow = true;

            SetDataSetMode(EDataSetMode.View);
        }

        private void indoor1GridView_CellValueChanging(object sender, CellValueChangedEventArgs e)
        {
            AdvBandedGridView view = sender as AdvBandedGridView;

            switch (e.Column.FieldName)
            {
                case "Indoor1Use":
                    if ((EIndoorUse)e.Value == EIndoorUse.NotUsed)
                    {
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Mode1"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Duct1"], EIndoorDuct.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Mode2"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Duct2"], EIndoorDuct.NotUsed);
                    }
                    break;

                case "Indoor2Use":
                    if ((EIndoorUse)e.Value == EIndoorUse.NotUsed)
                    {
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Mode1"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Duct1"], EIndoorDuct.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Mode2"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Duct2"], EIndoorDuct.NotUsed);
                    }
                    break;
            }
        }

        private void indoor1GridView_CustomDrawBandHeader(object sender, BandHeaderCustomDrawEventArgs e)
        {
            if (e.Band == null) return;

            if (e.Band.AppearanceHeader.BackColor != Color.Empty)
            {
                e.Info.AllowColoring = true;
            }
        }

        private void indoor1GridView_CustomDrawColumnHeader(object sender, ColumnHeaderCustomDrawEventArgs e)
        {
            if (e.Column == null) return;

            if (e.Column.AppearanceHeader.BackColor != Color.Empty)
            {
                e.Info.AllowColoring = true;
            }
        }

        private void indoor1ModeLookUp_EditValueChanging(object sender, ChangingEventArgs e)
        {
            GridView view = indoor1GridView;
            GridColumn column = view.FocusedColumn;

            if (column.FieldName != "Indoor1Use")
            {
                if ((EIndoorUse)view.GetRowCellValue(view.FocusedRowHandle,
                    view.Columns["Indoor1Use"]) == EIndoorUse.NotUsed)
                {
                    e.Cancel = true;
                }
            }
        }

        private void indoor2ModeLookUp_EditValueChanging(object sender, ChangingEventArgs e)
        {
            GridView view = indoor2GridView;
            GridColumn column = view.FocusedColumn;

            if (column.FieldName != "Indoor2Use")
            {
                if ((EIndoorUse)view.GetRowCellValue(view.FocusedRowHandle,
                    view.Columns["Indoor2Use"]) == EIndoorUse.NotUsed)
                {
                    e.Cancel = true;
                }
            }
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;

            bookmark.Get();

            if (string.IsNullOrWhiteSpace(searchStandardEdit.Text) == true)
                Resource.Db.ScheduleParamSet.Select();
            else
                Resource.Db.ScheduleParamSet.Select(searchStandardEdit.Text.Trim());

            bookmark.Goto();
            scheduleGrid.Focus();
        }

        private void newButton_Click(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;

            SetDataSetMode(EDataSetMode.New);
            ResetEdit();
            standardEdit.Focus();
        }

        private void modifyButton_Click(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;
            if (scheduleGridView.FocusedRowHandle < 0) return;

            SetDataSetMode(EDataSetMode.Modify);
            SetEditFromDataSet();
            standardEdit.Focus();
        }

        private void copyButton_Click(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;
            if (scheduleGridView.FocusedRowHandle < 0) return;

            if (MessageBox.Show("Would you like to copy a record focused?",
                Resource.Caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                == DialogResult.No)
            {
                return;
            }

            standardEdit.Focus();
            SetEditToDataSet();

            Resource.Db.ScheduleParamSet.RecNo = (int)Resource.Db.GetGenNo("GN_SCHEDULEPARAM");
            Resource.Db.ScheduleParamSet.Insert();
            searchButton.PerformClick();
        }

        private void deleteButton_Click(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;
            if (scheduleGridView.FocusedRowHandle < 0) return;

            if (MessageBox.Show("Would you like to delete a record focused?",
                Resource.Caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                == DialogResult.No)
            {
                return;
            }

            Resource.Db.ScheduleParamSet.Delete();
            searchButton.PerformClick();
        }

        private void saveButton_Click(object sender, EventArgs e)
        {
            standardEdit.Focus();

            string standard = standardEdit.Text.Trim();
            string name = nameEdit.Text.Trim();

            if ((standard == "") || (name == ""))
            {
                MessageBox.Show("You must fill Standard and Name fields!",
                    Resource.Caption, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                standardEdit.Focus();
                return;
            }

            SetEditToDataSet();

            if (mode == EDataSetMode.New)
            {
                Resource.Db.ScheduleParamSet.RecNo = (int)Resource.Db.GetGenNo("GN_SCHEDULEPARAM");
                Resource.Db.ScheduleParamSet.Insert();
            }
            else
            {
                Resource.Db.ScheduleParamSet.Update();
            }

            SetDataSetMode(EDataSetMode.View);
            searchButton.PerformClick();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            SetDataSetMode(EDataSetMode.View);
            searchButton.PerformClick();
        }

        private void scheduleGridView_FocusedRowChanged(object sender, FocusedRowChangedEventArgs e)
        {
            if (e.FocusedRowHandle < 0) return;
            if (mode != EDataSetMode.View) return;

            DataRow row = scheduleGridView.GetDataRow(e.FocusedRowHandle);
            Resource.Db.ScheduleParamSet.Fetch(row);
            SetEditFromDataSet();
        }

        private void scheduleGrid_DoubleClick(object sender, EventArgs e)
        {
            if (mode != EDataSetMode.View) return;

            modifyButton.PerformClick();
        }

        private string ToDevFormat(string format)
        {
            string[] strings = format.Split(new[] { '.' }, StringSplitOptions.None);

            if ((strings == null) || (strings.Length != 2)) return "f0";

            return $"f{strings[1].Length}";
        }

        private void SetDataSetMode(EDataSetMode mode)
        {
            this.mode = mode;
            viewStatePanel.Text = mode.ToString().ToUpper();

            switch (mode)
            {
                case EDataSetMode.View:
                    saveButton.Enabled = false;
                    cancelButton.Enabled = false;
                    viewStatePanel.BackColor = Color.Gray;
                    SetEditReadOnly(true);
                    break;

                case EDataSetMode.New:
                    saveButton.Enabled = true;
                    cancelButton.Enabled = true;
                    viewStatePanel.BackColor = Color.DeepSkyBlue;
                    SetEditReadOnly(false);
                    break;

                case EDataSetMode.Modify:
                    saveButton.Enabled = true;
                    cancelButton.Enabled = true;
                    viewStatePanel.BackColor = Color.DeepSkyBlue;
                    SetEditReadOnly(false);
                    break;
            }
        }

        private void SetEditReadOnly(bool active)
        {
            searchPanel.Enabled = active;

            foreach (TextEdit edit in id1Edits)
            {
                edit.Properties.ReadOnly = active;
                edit.EnterMoveNextControl = true;
            }

            foreach (TextEdit edit in id2Edits)
            {
                edit.Properties.ReadOnly = active;
                edit.EnterMoveNextControl = true;
            }

            foreach (TextEdit edit in odEdits)
            {
                edit.Properties.ReadOnly = active;
                edit.EnterMoveNextControl = true;
            }

            foreach (TextEdit edit in viewEdits)
            {
                edit.Properties.ReadOnly = active;
                edit.EnterMoveNextControl = true;
            }

            foreach (AdvBandedGridView gridView in viewGrids)
            {
                gridView.OptionsBehavior.ReadOnly = active;
            }
        }

        private void SetEditData(EDataSetMode mode)
        {
            switch (mode)
            {
                case EDataSetMode.View:
                case EDataSetMode.Modify:
                    SetEditFromDataSet();
                    break;

                case EDataSetMode.New:
                    ResetEdit();
                    break;
            }
        }

        private void SetEditFromDataSet()
        {
            ScheduleParamDataSet set = Resource.Db.ScheduleParamSet;

            standardEdit.Text = set.Standard;
            nameEdit.Text = set.Name;
            noSteadyEdit.EditValue = set.NoOfSteady;
            preparationEdit.EditValue = set.Preparation;
            judgementEdit.EditValue = set.Judgement;
            repeatEdit.EditValue = set.Repeat;

            chamberParams[0].Indoor1Use = set.ID1Use;
            chamberParams[0].Indoor1Mode1 = set.ID1Mode1;
            chamberParams[0].Indoor1Duct1 = set.ID1Duct1;
            chamberParams[0].Indoor1Mode2 = set.ID1Mode2;
            chamberParams[0].Indoor1Duct2 = set.ID1Duct2;

            id1EdbSetupEdit.EditValue = set.ID1EdbSetup;
            id1EdbAvgEdit.EditValue = set.ID1EdbAvg;
            id1EdbDevEdit.EditValue = set.ID1EdbDev;
            id1EwbSetupEdit.EditValue = set.ID1EwbSetup;
            id1EwbAvgEdit.EditValue = set.ID1EwbAvg;
            id1EwbDevEdit.EditValue = set.ID1EwbDev;
            id1Ldb1DevEdit.EditValue = set.ID1Ldb1Dev;
            id1Lwb1DevEdit.EditValue = set.ID1Lwb1Dev;
            id1Airflow1DevEdit.EditValue = set.ID1Af1Dev;
            id1Ldb2DevEdit.EditValue = set.ID1Ldb2Dev;
            id1Lwb2DevEdit.EditValue = set.ID1Lwb2Dev;
            id1Airflow2DevEdit.EditValue = set.ID1Af2Dev;
            id1Cdp1SetupEdit.EditValue = set.ID1Cdp1Setup;
            id1Cdp1AvgEdit.EditValue = set.ID1Cdp1Avg;
            id1Cdp1DevEdit.EditValue = set.ID1Cdp1Dev;
            id1Cdp2SetupEdit.EditValue = set.ID1Cdp2Setup;
            id1Cdp2AvgEdit.EditValue = set.ID1Cdp2Avg;
            id1Cdp2DevEdit.EditValue = set.ID1Cdp2Dev;

            chamberParams[0].Indoor2Use = set.ID2Use;
            chamberParams[0].Indoor2Mode1 = set.ID2Mode1;
            chamberParams[0].Indoor2Duct1 = set.ID2Duct1;
            chamberParams[0].Indoor2Mode2 = set.ID2Mode2;
            chamberParams[0].Indoor2Duct2 = set.ID2Duct2;

            id2EdbSetupEdit.EditValue = set.ID2EdbSetup;
            id2EdbAvgEdit.EditValue = set.ID2EdbAvg;
            id2EdbDevEdit.EditValue = set.ID2EdbDev;
            id2EwbSetupEdit.EditValue = set.ID2EwbSetup;
            id2EwbAvgEdit.EditValue = set.ID2EwbAvg;
            id2EwbDevEdit.EditValue = set.ID2EwbDev;
            id2Ldb1DevEdit.EditValue = set.ID2Ldb1Dev;
            id2Lwb1DevEdit.EditValue = set.ID2Lwb1Dev;
            id2Airflow1DevEdit.EditValue = set.ID2Af1Dev;
            id2Ldb2DevEdit.EditValue = set.ID2Ldb2Dev;
            id2Lwb2DevEdit.EditValue = set.ID2Lwb2Dev;
            id2Airflow2DevEdit.EditValue = set.ID2Af2Dev;
            id2Cdp1SetupEdit.EditValue = set.ID2Cdp1Setup;
            id2Cdp1AvgEdit.EditValue = set.ID2Cdp1Avg;
            id2Cdp1DevEdit.EditValue = set.ID2Cdp1Dev;
            id2Cdp2SetupEdit.EditValue = set.ID2Cdp2Setup;
            id2Cdp2AvgEdit.EditValue = set.ID2Cdp2Avg;
            id2Cdp2DevEdit.EditValue = set.ID2Cdp2Dev;

            chamberParams[0].OutdoorUse = set.ODUse;
            chamberParams[0].OutdoorDpSensor = set.ODDp;
            chamberParams[0].OutdoorAutoVolt = set.ODAutoVolt;

            odEdbSetupEdit.EditValue = set.ODEdbSetup;
            odEdbAvgEdit.EditValue = set.ODEdpAvg;
            odEdbDevEdit.EditValue = set.ODEdpDev;
            odEwbSetupEdit.EditValue = set.ODEwbSetup;
            odEwbAvgEdit.EditValue = set.ODEwbAvg;
            odEwbDevEdit.EditValue = set.ODEwbDev;
            odEdpSetupEdit.EditValue = set.ODEdpSetup;
            odEdpAvgEdit.EditValue = set.ODEwbAvg;
            odEdpDevEdit.EditValue = set.ODEwbDev;
            odVolt1SetupEdit.EditValue = set.ODVolt1Setup;
            odVolt1AvgEdit.EditValue = set.ODVolt1Avg;
            odVolt1DevEdit.EditValue = set.ODVolt1Dev;
            odVolt2SetupEdit.EditValue = set.ODVolt2Setup;
            odVolt2AvgEdit.EditValue = set.ODVolt2Avg;
            odVolt2DevEdit.EditValue = set.ODVolt2Dev;

            indoor1GridView.RefreshData();
            indoor2GridView.RefreshData();
            outdoorGridView.RefreshData();
        }
        private void SetEditToDataSet()
        {
            ScheduleParamDataSet set = Resource.Db.ScheduleParamSet;

            set.Standard = standardEdit.Text;
            set.Name = nameEdit.Text;
            set.NoOfSteady = int.Parse(noSteadyEdit.Text);
            set.Preparation = int.Parse(preparationEdit.Text);
            set.Judgement = int.Parse(judgementEdit.Text);
            set.Repeat = int.Parse(repeatEdit.Text);

            set.ID1Use = chamberParams[0].Indoor1Use;
            set.ID1Mode1 = chamberParams[0].Indoor1Mode1;
            set.ID1Duct1 = chamberParams[0].Indoor1Duct1;
            set.ID1Mode2 = chamberParams[0].Indoor1Mode2;
            set.ID1Duct2 = chamberParams[0].Indoor1Duct2;

            set.ID1EdbSetup = float.Parse(id1EdbSetupEdit.Text);
            set.ID1EdbAvg = float.Parse(id1EdbAvgEdit.Text);  
            set.ID1EdbDev = float.Parse(id1EdbDevEdit.Text);  
            set.ID1EwbSetup = float.Parse(id1EwbSetupEdit.Text);
            set.ID1EwbAvg = float.Parse(id1EwbAvgEdit.Text);  
            set.ID1EwbDev = float.Parse(id1EwbDevEdit.Text);  
            set.ID1Ldb1Dev = float.Parse(id1Ldb1DevEdit.Text); 
            set.ID1Lwb1Dev = float.Parse(id1Lwb1DevEdit.Text);
            set.ID1Af1Dev = float.Parse(id1Airflow1DevEdit.Text);
            set.ID1Ldb2Dev = float.Parse(id1Ldb2DevEdit.Text);
            set.ID1Lwb2Dev = float.Parse(id1Lwb2DevEdit.Text);
            set.ID1Af2Dev = float.Parse(id1Airflow2DevEdit.Text);

            set.ID1Cdp1Setup = float.Parse(id1Cdp1SetupEdit.Text);
            set.ID1Cdp1Avg = float.Parse(id1Cdp1AvgEdit.Text);
            set.ID1Cdp1Dev = float.Parse(id1Cdp1DevEdit.Text);
            set.ID1Cdp2Setup = float.Parse(id1Cdp2SetupEdit.Text);
            set.ID1Cdp2Avg = float.Parse(id1Cdp2AvgEdit.Text);
            set.ID1Cdp2Dev = float.Parse(id1Cdp2DevEdit.Text);

            set.ID2Use = chamberParams[0].Indoor2Use;
            set.ID2Mode1 = chamberParams[0].Indoor2Mode1;
            set.ID2Duct1 = chamberParams[0].Indoor2Duct1;
            set.ID2Mode2 = chamberParams[0].Indoor2Mode2;
            set.ID2Duct2 = chamberParams[0].Indoor2Duct2;

            set.ID2EdbSetup = float.Parse(id2EdbSetupEdit.Text);
            set.ID2EdbAvg = float.Parse(id2EdbAvgEdit.Text);
            set.ID2EdbDev = float.Parse(id2EdbDevEdit.Text);
            set.ID2EwbSetup = float.Parse(id2EwbSetupEdit.Text);
            set.ID2EwbAvg = float.Parse(id2EwbAvgEdit.Text);
            set.ID2EwbDev = float.Parse(id2EwbDevEdit.Text);
            set.ID2Ldb1Dev = float.Parse(id2Ldb1DevEdit.Text);
            set.ID2Lwb1Dev = float.Parse(id2Lwb1DevEdit.Text);
            set.ID2Af1Dev = float.Parse(id2Airflow1DevEdit.Text);
            set.ID2Ldb2Dev = float.Parse(id2Ldb2DevEdit.Text);
            set.ID2Lwb2Dev = float.Parse(id2Lwb2DevEdit.Text);
            set.ID2Af2Dev = float.Parse(id2Airflow2DevEdit.Text);

            set.ID2Cdp1Setup = float.Parse(id2Cdp1SetupEdit.Text);
            set.ID2Cdp1Avg = float.Parse(id2Cdp1AvgEdit.Text);
            set.ID2Cdp1Dev = float.Parse(id2Cdp1DevEdit.Text);
            set.ID2Cdp2Setup = float.Parse(id2Cdp2SetupEdit.Text);
            set.ID2Cdp2Avg = float.Parse(id2Cdp2AvgEdit.Text);
            set.ID2Cdp2Dev = float.Parse(id2Cdp2DevEdit.Text);

            set.ODUse = chamberParams[0].OutdoorUse;
            set.ODDp = chamberParams[0].OutdoorDpSensor;
            set.ODAutoVolt = chamberParams[0].OutdoorAutoVolt;

            set.ODEdbSetup = float.Parse(odEdbSetupEdit.Text);  
            set.ODEdpAvg = float.Parse(odEdbAvgEdit.Text);    
            set.ODEdpDev = float.Parse(odEdbDevEdit.Text);    
            set.ODEwbSetup = float.Parse(odEwbSetupEdit.Text);  
            set.ODEwbAvg = float.Parse(odEwbAvgEdit.Text);    
            set.ODEwbDev = float.Parse(odEwbDevEdit.Text);    
            set.ODEdpSetup = float.Parse(odEdpSetupEdit.Text);  
            set.ODEwbAvg = float.Parse(odEdpAvgEdit.Text);    
            set.ODEwbDev = float.Parse(odEdpDevEdit.Text);    
            set.ODVolt1Setup = float.Parse(odVolt1SetupEdit.Text);
            set.ODVolt1Avg = float.Parse(odVolt1AvgEdit.Text);  
            set.ODVolt1Dev = float.Parse(odVolt1DevEdit.Text);  
            set.ODVolt2Setup = float.Parse(odVolt2SetupEdit.Text);
            set.ODVolt2Avg = float.Parse(odVolt2AvgEdit.Text);  
            set.ODVolt2Dev = float.Parse(odVolt2DevEdit.Text);  
        }

        private void ResetEdit()
        {
            standardEdit.Text = "";
            nameEdit.Text = "";
            noSteadyEdit.EditValue = 0;
            preparationEdit.EditValue = 0;
            judgementEdit.EditValue = 0;
            repeatEdit.EditValue = 0;

            chamberParams[0].Indoor1Use = EIndoorUse.Indoor;
            chamberParams[0].Indoor1Mode1 = EIndoorMode.Cooling;
            chamberParams[0].Indoor1Duct1 = EIndoorDuct.N1;
            chamberParams[0].Indoor1Mode2 = EIndoorMode.Cooling;
            chamberParams[0].Indoor1Duct2 = EIndoorDuct.N1;

            chamberParams[0].Indoor2Use = EIndoorUse.Indoor;
            chamberParams[0].Indoor2Mode1 = EIndoorMode.Cooling;
            chamberParams[0].Indoor2Duct1 = EIndoorDuct.N1;
            chamberParams[0].Indoor2Mode2 = EIndoorMode.Cooling;
            chamberParams[0].Indoor2Duct2 = EIndoorDuct.N1;

            chamberParams[0].OutdoorUse = EOutdoorUse.Outdoor;
            chamberParams[0].OutdoorDpSensor = EEtcUse.Use;
            chamberParams[0].OutdoorAutoVolt = EEtcUse.Use;

            indoor1GridView.RefreshData();
            indoor2GridView.RefreshData();
            outdoorGridView.RefreshData();

            foreach (TextEdit edit in id1Edits)
            {
                edit.EditValue = 0;
            }

            foreach (TextEdit edit in id2Edits)
            {
                edit.EditValue = 0;
            }

            foreach (TextEdit edit in odEdits)
            {
                edit.EditValue = 0;
            }
        }
    }
}
