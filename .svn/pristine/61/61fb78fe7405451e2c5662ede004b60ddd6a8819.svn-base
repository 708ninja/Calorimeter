using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using Ulee.Controls;
using Ulee.DllImport.Win32;

namespace Hnc.Calorimeter.Client
{
    public partial class FormClientMain : UlFormEng
    {
        public FormClientMain()
        {
            InitializeComponent();
            Initialize();
        }

        private const int WM_PROG_TERMINATE = (Win32.WM_USER + 0);

        private const int csInvalidTime = 500;

        private ETerminateCode terminateCode;

        private InvalidThread invalidThread;

        private void Initialize()
        {
            Resource.Client.Listener.NonAcknowledge += DoNonAcknowledge;
            Resource.Client.Listener.NotifyTermination += DoNotifyTermination;

            terminateCode = ETerminateCode.None;

            DefMenu = new UlMenu(viewPanel);
            DefMenu.Add(new CtrlTestTop(), testButton);
            DefMenu.Add(new CtrlViewTop(), viewButton);
            DefMenu.Add(new CtrlDeviceTop(), deviceButton);
            DefMenu.Add(new CtrlLogTop(), logButton);

            invalidThread = null;
        }

        protected override void WndProc(ref Message m)
        {
            switch (m.Msg)
            {
                case WM_PROG_TERMINATE:
                    terminateCode = (ETerminateCode)m.WParam;
                    Close();
                    break;
            }

            base.WndProc(ref m);
        }

        private void FormClientMain_Load(object sender, EventArgs args)
        {
            Resource.TLog.Log((int)ELogItem.Note, "Start Calorimeter Client Program.");
            DispCaption();

            DefMenu.Index = 0;
            Location = new Point(0, 0);

            Resource.TLog.Log((int)ELogItem.Note, "Resume the thread for listener.");
            Resource.Client.Resume();

            Resource.TLog.Log((int)ELogItem.Note, "Send connection command to Server.");
            Resource.Client.Connect();

            Resource.TLog.Log((int)ELogItem.Note, "Resume invalidation thread of screen.");
            invalidThread = new InvalidThread(csInvalidTime);
            invalidThread.InvalidControls += InvalidForm;
            invalidThread.Resume();
        }

        private void FormClientMain_Shown(object sender, EventArgs e)
        {
        }

        private void FormClientMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (terminateCode != ETerminateCode.None)
            {
                e.Cancel = false;
                return;
            }

            if (MessageBox.Show("Would you like to exit this program?",
                Resource.Caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                == DialogResult.No)
            {
                e.Cancel = true;
            }
        }

        private void FormClientMain_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (invalidThread != null)
            {
                invalidThread.Terminate();
            }

            switch (terminateCode)
            {
                case ETerminateCode.None:
                    Resource.Client.Disconnect();
                    break;

                case ETerminateCode.ReceivedTerminateCommand:
                    MessageBox.Show("This program is terminated by termination command from server!",
                        Resource.Caption, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    break;

                case ETerminateCode.NonAcknowledgement:
                    //MessageBox.Show("This program is terminated by non acknowledgement from server!",
                    //    Resource.Caption, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    break;
            }

            Resource.Client.Terminate();
            Resource.TLog.Log((int)ELogItem.Note, "Exit Calorimeter Client Program.");
        }

        private void FormClientMain_Resize(object sender, EventArgs e)
        {
            if (Width > 1936) Width = 1936;
            if (Height > 1066) Height = 1066;

            if (Width < 1280) Width = 1280;
            if (Height < 800) Height = 800;
        }

        private void testLineToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int tag = int.Parse((sender as ToolStripItem).Tag.ToString());

            DefMenu.Index = 0;
            (DefMenu.Controls(0) as CtrlTestTop).DefMenu.Index = tag;
        }

        private void testViewToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int tag = int.Parse((sender as ToolStripItem).Tag.ToString());

            DefMenu.Index = 1;
            (DefMenu.Controls(1) as CtrlViewTop).DefMenu.Index = tag;
        }

        private void deviceToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int tag = int.Parse((sender as ToolStripItem).Tag.ToString());

            DefMenu.Index = 2;
            (DefMenu.Controls(2) as CtrlDeviceTop).DefMenu.Index = tag;
        }

        private void logToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DefMenu.Index = 3;
        }

        private void configMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void exitMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void DoNotifyTermination(object sender, EventArgs e)
        {
            if (this.InvokeRequired == true)
            {
                EventHandler func = new EventHandler(DoNotifyTermination);
                Invoke(func);
            }
            else
            {
                Win32.PostMessage(this.Handle,
                    WM_PROG_TERMINATE,
                    (IntPtr)ETerminateCode.ReceivedTerminateCommand,
                    (IntPtr)0);
            }
        }

        private void DoNonAcknowledge(object sender, EventArgs e)
        {
            if (this.InvokeRequired == true)
            {
                EventHandler func = new EventHandler(DoNonAcknowledge);
                Invoke(func);
            }
            else
            {
                Win32.PostMessage(this.Handle,
                    WM_PROG_TERMINATE,
                    (IntPtr)ETerminateCode.NonAcknowledgement,
                    (IntPtr)0);
            }
        }

        public override void InvalidForm(object sender, EventArgs args)
        {
            if (this.InvokeRequired == true)
            {
                EventHandler func = new EventHandler(InvalidForm);
                Invoke(func);
            }
            else
            {
                InvalidDateTime();
                InvalidUserControls(DefMenu);
            }
        }

        private void InvalidDateTime()
        {
            string dateTime = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss");

            if (dateTimeStatusLabel.Text != dateTime)
            {
                dateTimeStatusLabel.Text = dateTime;
            }
        }

        private void InvalidUserControls(UlMenu menu)
        {
            UlUserControlEng userControl = null;

            for (int i = 0; i < menu.ControlsCount; i++)
            {
                userControl = menu.Controls(i) as UlUserControlEng;
                userControl.InvalidControl(this, null);

                if (userControl.DefMenu != null)
                {
                    InvalidUserControls(userControl.DefMenu);
                }
            }
        }

        private void DispCaption()
        {
            Text = "H&C System Calorimeter Client Program Ver " +
                Assembly.GetExecutingAssembly().GetName().Version.ToString();
        }
    }
}
