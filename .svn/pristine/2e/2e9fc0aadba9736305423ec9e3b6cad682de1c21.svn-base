using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using DevExpress.XtraGrid.Views.Grid;

using Ulee.Controls;
using Ulee.Device.Connection.Yokogawa;
using Ulee.Utils;

namespace Hnc.Calorimeter.Client
{
    public partial class CtrlTestMeas : UlUserControlEng
    {
        public CtrlTestMeas(TestContext context)
        {
            InitializeComponent();

            this.context = context;
            Initialize();
        }

        private TestContext context;

        private void Initialize()
        {
            Color evenColor = Color.FromArgb(244, 244, 236);

            totalRatedGrid.DataSource = context.Measure.TotalRateds;
            totalRatedGridView.Appearance.EvenRow.BackColor = evenColor;
            totalRatedGridView.OptionsView.EnableAppearanceEvenRow = true;

            runStateGrid.DataSource = context.Measure.RunStates;
            runStateGridView.Appearance.EvenRow.BackColor = evenColor;
            runStateGridView.OptionsView.EnableAppearanceEvenRow = true;

            airSideGrid.DataSource = context.Measure.AirSides;
            airSideGridView.Appearance.EvenRow.BackColor = evenColor;
            airSideGridView.OptionsView.EnableAppearanceEvenRow = true;

            asNozzleGrid.DataSource = null;
            asNozzleGridView.Appearance.EvenRow.BackColor = evenColor;
            asNozzleGridView.OptionsView.EnableAppearanceEvenRow = true;

            outsideGrid.DataSource = context.Measure.Outsides;
            outsideGridView.Appearance.EvenRow.BackColor = evenColor;
            outsideGridView.OptionsView.EnableAppearanceEvenRow = true;

            methodGrid.DataSource = context.Measure.Methods;
            methodGridView.Appearance.EvenRow.BackColor = evenColor;
            methodGridView.OptionsView.EnableAppearanceEvenRow = true;

            noteGrid.DataSource = context.Measure.Notes;
            noteGridView.Appearance.EvenRow.BackColor = evenColor;
            noteGridView.OptionsView.EnableAppearanceEvenRow = true;

            ratedGrid.DataSource = context.Measure.Rateds;
            ratedGridView.Appearance.EvenRow.BackColor = evenColor;
            ratedGridView.OptionsView.EnableAppearanceEvenRow = true;

            indoor11Grid.DataSource = context.Measure.Indoors11;
            indoor11GridView.Appearance.EvenRow.BackColor = evenColor;
            indoor11GridView.OptionsView.EnableAppearanceEvenRow = true;

            indoor12Grid.DataSource = context.Measure.Indoors12;
            indoor12GridView.Appearance.EvenRow.BackColor = evenColor;
            indoor12GridView.OptionsView.EnableAppearanceEvenRow = true;

            indoor21Grid.DataSource = context.Measure.Indoors21;
            indoor21GridView.Appearance.EvenRow.BackColor = evenColor;
            indoor21GridView.OptionsView.EnableAppearanceEvenRow = true;

            indoor22Grid.DataSource = context.Measure.Indoors22;
            indoor22GridView.Appearance.EvenRow.BackColor = evenColor;
            indoor22GridView.OptionsView.EnableAppearanceEvenRow = true;

            outdoorGrid.DataSource = context.Measure.Outdoors;
            outdoorGridView.Appearance.EvenRow.BackColor = evenColor;
            outdoorGridView.OptionsView.EnableAppearanceEvenRow = true;

            tc1Grid.DataSource = context.Measure.IndoorTC1;
            tc1GridView.Appearance.EvenRow.BackColor = evenColor;
            tc1GridView.OptionsView.EnableAppearanceEvenRow = true;

            tc2Grid.DataSource = context.Measure.IndoorTC2;
            tc2GridView.Appearance.EvenRow.BackColor = evenColor;
            tc2GridView.OptionsView.EnableAppearanceEvenRow = true;

            tc3Grid.DataSource = context.Measure.OutdoorTC;
            tc3GridView.Appearance.EvenRow.BackColor = evenColor;
            tc3GridView.OptionsView.EnableAppearanceEvenRow = true;

            pressureGrid.DataSource = context.Measure.Pressures;
            pressureGridView.Appearance.EvenRow.BackColor = evenColor;
            pressureGridView.OptionsView.EnableAppearanceEvenRow = true;
        }

        public override void InvalidControl(object sender, EventArgs args)
        {
            if (this.InvokeRequired == true)
            {
                EventHandler func = new EventHandler(InvalidControl);
                Invoke(func);
            }
            else
            {
                totalRatedGridView.RefreshData();
                runStateGridView.RefreshData();
                airSideGridView.RefreshData();
                asNozzleGridView.RefreshData();
                outsideGridView.RefreshData();
                methodGridView.RefreshData();
                noteGridView.RefreshData();
                ratedGridView.RefreshData();
                indoor11GridView.RefreshData();
                indoor12GridView.RefreshData();
                indoor21GridView.RefreshData();
                indoor22GridView.RefreshData();
                outdoorGridView.RefreshData();
                tc1GridView.RefreshData();
                tc2GridView.RefreshData();
                tc3GridView.RefreshData();
                pressureGridView.RefreshData();
            }
        }

        private void CtrlTestMeas_Enter(object sender, EventArgs e)
        {
            // Note
            context.Measure.Notes[(int)EMeasNote.Company].Value = context.Condition.Note.Company;
            context.Measure.Notes[(int)EMeasNote.TestName].Value = context.Condition.Note.Name;
            context.Measure.Notes[(int)EMeasNote.TestNo].Value = context.Condition.Note.No;
            context.Measure.Notes[(int)EMeasNote.Observer].Value = context.Condition.Note.Observer;
            context.Measure.Notes[(int)EMeasNote.Maker].Value = context.Condition.Note.Maker;
            context.Measure.Notes[(int)EMeasNote.Model1].Value = context.Condition.Note.Model1;
            context.Measure.Notes[(int)EMeasNote.SerialNo1].Value = context.Condition.Note.Serial1;
            context.Measure.Notes[(int)EMeasNote.Model2].Value = context.Condition.Note.Model2;
            context.Measure.Notes[(int)EMeasNote.SerialNo2].Value = context.Condition.Note.Serial2;
            context.Measure.Notes[(int)EMeasNote.Model3].Value = context.Condition.Note.Model3;
            context.Measure.Notes[(int)EMeasNote.SerialNo3].Value = context.Condition.Note.Serial3;
            context.Measure.Notes[(int)EMeasNote.ExpDevice].Value = context.Condition.Note.ExpDevice;
            context.Measure.Notes[(int)EMeasNote.Refrigerant].Value = context.Condition.Note.Refrigerant;
            context.Measure.Notes[(int)EMeasNote.RefCharge].Value = context.Condition.Note.RefCharge;
            context.Measure.Notes[(int)EMeasNote.Memo].Value = context.Condition.Note.Memo;

            // Method
            context.Measure.Methods[(int)EMeasMethod.Method].Value = $"{context.Condition.Method.IntegralTime}min / {context.Condition.Method.IntegralCount}times";
            context.Measure.Methods[(int)EMeasMethod.ScanTime].Value = $"{context.Condition.Method.ScanTime} sec";

            //Indoor1 #1
            context.Measure.Indoors11[(int)EMeasIndoor.Use].Value = EnumHelper.GetNames<EIndoorUse>()[(int)context.Condition.Schedules[0].Indoor1Use];
            context.Measure.Indoors11[(int)EMeasIndoor.Mode].Value = EnumHelper.GetNames<EIndoorMode>()[(int)context.Condition.Schedules[0].Indoor1Mode1];
            context.Measure.Indoors11[(int)EMeasIndoor.Duct].Value = EnumHelper.GetNames<EIndoorDuct>()[(int)context.Condition.Schedules[0].Indoor1Duct1];

            //Indoor1 #2
            context.Measure.Indoors12[(int)EMeasIndoor.Use].Value = EnumHelper.GetNames<EIndoorUse>()[(int)context.Condition.Schedules[0].Indoor1Use];
            context.Measure.Indoors12[(int)EMeasIndoor.Mode].Value = EnumHelper.GetNames<EIndoorMode>()[(int)context.Condition.Schedules[0].Indoor1Mode2];
            context.Measure.Indoors12[(int)EMeasIndoor.Duct].Value = EnumHelper.GetNames<EIndoorDuct>()[(int)context.Condition.Schedules[0].Indoor1Duct2];

            //Indoor2 #1
            context.Measure.Indoors21[(int)EMeasIndoor.Use].Value = EnumHelper.GetNames<EIndoorUse>()[(int)context.Condition.Schedules[0].Indoor2Use];
            context.Measure.Indoors21[(int)EMeasIndoor.Mode].Value = EnumHelper.GetNames<EIndoorMode>()[(int)context.Condition.Schedules[0].Indoor2Mode1];
            context.Measure.Indoors21[(int)EMeasIndoor.Duct].Value = EnumHelper.GetNames<EIndoorDuct>()[(int)context.Condition.Schedules[0].Indoor2Duct1];

            //Indoor2 #2
            context.Measure.Indoors22[(int)EMeasIndoor.Use].Value = EnumHelper.GetNames<EIndoorUse>()[(int)context.Condition.Schedules[0].Indoor2Use];
            context.Measure.Indoors22[(int)EMeasIndoor.Mode].Value = EnumHelper.GetNames<EIndoorMode>()[(int)context.Condition.Schedules[0].Indoor2Mode2];
            context.Measure.Indoors22[(int)EMeasIndoor.Duct].Value = EnumHelper.GetNames<EIndoorDuct>()[(int)context.Condition.Schedules[0].Indoor2Duct2];

            //Outdoor
            context.Measure.Outdoors[(int)EMeasOutdoor.Use].Value = EnumHelper.GetNames<EOutdoorUse>()[(int)context.Condition.Schedules[0].OutdoorUse];
            context.Measure.Outdoors[(int)EMeasOutdoor.DPSensor].Value = EnumHelper.GetNames<EEtcUse>()[(int)context.Condition.Schedules[0].OutdoorDpSensor];
            context.Measure.Outdoors[(int)EMeasOutdoor.AutoVoltage].Value = EnumHelper.GetNames<EEtcUse>()[(int)context.Condition.Schedules[0].OutdoorAutoVolt];

            int pmIndex = context.Condition.Rateds[EConditionRated.Total].PowerMeter;
            string pmHead = $"PM{pmIndex+1}";

            context.Measure.Rateds[(int)EMeasRated.Voltage].Row = context.Value.Measured[pmHead + ".R.V"];
            context.Measure.Rateds[(int)EMeasRated.Current].Row = context.Value.Measured[pmHead + ".R.A"];
            context.Measure.Rateds[(int)EMeasRated.Frequency].Row = context.Value.Measured[pmHead + ".R.Hz"];
            context.Measure.Rateds[(int)EMeasRated.Phase].Value = EnumHelper.GetNames<EWT330Wiring>()[(int)context.Condition.Rateds[EConditionRated.Total].Wiring];
            context.Measure.Rateds[(int)EMeasRated.PowerMeter].Value = Resource.Client.Devices.PowerMeter.Rows[pmIndex].Name;
        }

        public void SetAllGridData()
        {

        }
    }
}
