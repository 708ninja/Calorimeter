using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using DevExpress.XtraSpreadsheet;

namespace Hnc.Calorimeter.Client
{
    #region TestReport
    public class TestReport
    {
        public TestReport(TestContext context)
        {
            this.context = context;

            Method = new ConditionMethod();
            Note = new ConditionNote();
            Rated = new ConditionRated();
            ValueSheets = new Dictionary<string, ReportSheet>();
        }

        private TestContext context;

        public ConditionMethod Method { get; set; }
        public ConditionNote Note { get; set; }
        public ConditionRated Rated { get; set; }
        public Dictionary<string, ReportSheet> ValueSheets { get; set; }

        public void Initialize()
        {
            ConditionSchedule sch = context.Condition.Schedules[context.Index];
            ReportSheet sheet;

            ConditionMethod method = context.Condition.Method;
            Method.Mode = method.Mode;
            Method.IntegralCount = method.IntegralCount;
            Method.IntegralTime = method.IntegralTime;
            Method.ScanTime = method.ScanTime;
            Method.CoolingCapacity = method.CoolingCapacity;
            Method.HeatingCapacity = method.HeatingCapacity;
            Method.AirFlow = method.AirFlow;
            Method.Enthalpy = method.Enthalpy;
            Method.Pressure = method.Pressure;
            Method.DiffPressure = method.DiffPressure;
            Method.AtmPressure = method.AtmPressure;
            Method.AutoControllerSetting = method.AutoControllerSetting;
            Method.UsePowerMeterIntegral = method.UsePowerMeterIntegral;

            ConditionNote note = context.Condition.Note;
            Note.Company = note.Company;
            Note.Name = note.Name;
            Note.No = note.No;
            Note.Observer = note.Observer;
            Note.Maker = note.Maker;
            Note.Model1 = note.Model1;
            Note.Serial1 = note.Serial1;
            Note.Model2 = note.Model2;
            Note.Serial2 = note.Serial2;
            Note.Model3 = note.Model3;
            Note.Serial3 = note.Serial3;
            Note.ExpDevice = note.ExpDevice;
            Note.Refrigerant = note.Refrigerant;
            Note.RefCharge = note.RefCharge;
            Note.Memo = note.Memo;

            EIndoorMode mode = sch.Indoor1Mode;
            if (mode == EIndoorMode.NotUsed)
            {
                mode = sch.Indoor2Mode;
                if (mode == EIndoorMode.NotUsed) mode = EIndoorMode.Cooling;
            }

            ConditionRated rated = context.Condition.Rateds[EConditionRated.Total][(int)mode];
            Rated.Capacity = rated.Capacity;
            Rated.PowerInput = rated.PowerInput;
            Rated.EER_COP = rated.EER_COP;
            Rated.Voltage = rated.Voltage;
            Rated.Current = rated.Current;
            Rated.Frequency = rated.Frequency;
            Rated.PM_IDU = rated.PM_IDU;
            Rated.PM_ODU = rated.PM_ODU;
            Rated.Wiring = rated.Wiring;

            lock (ValueSheets)
            {
                ValueSheets.Clear();

                sheet = new ReportCalorieSheet(context, "ID1", "ID11",
                    sch.Indoor1DB, sch.Indoor1WB, sch.Indoor1Use, sch.Indoor1Mode1,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID A #1", sheet);

                sheet = new ReportCalorieSheet(context, "ID1", "ID12",
                    sch.Indoor1DB, sch.Indoor1WB, sch.Indoor1Use, sch.Indoor1Mode2,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID A #2", sheet);

                sheet = new ReportCalorieSheet(context, "ID2", "ID21",
                    sch.Indoor2DB, sch.Indoor2WB, sch.Indoor2Use, sch.Indoor2Mode1,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID B #1", sheet);

                sheet = new ReportCalorieSheet(context, "ID2", "ID22",
                    sch.Indoor2DB, sch.Indoor2WB, sch.Indoor2Use, sch.Indoor2Mode2,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID B #2", sheet);

                sheet = new ReportThermoSheet(context, "ID1", "",
                    sch.Indoor1DB, sch.Indoor1WB, sch.Indoor1Use, sch.Indoor1Mode1,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID A TC", sheet);

                sheet = new ReportThermoSheet(context, "ID2", "",
                    sch.Indoor1DB, sch.Indoor1WB, sch.Indoor2Use, sch.Indoor1Mode1,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("ID B TC", sheet);

                sheet = new ReportThermoSheet(context, "OD", "",
                    sch.Indoor1DB, sch.Indoor1WB, sch.Indoor1Use, sch.Indoor1Mode1,
                    sch.OutdoorDB, sch.OutdoorWB, sch.OutdoorUse, sch.OutdoorDpSensor);
                ValueSheets.Add("OD TC", sheet);
            }
        }

        public void Clear()
        {
            lock (ValueSheets)
            {
                foreach (KeyValuePair<string, ReportSheet> sheet in ValueSheets)
                {
                    foreach (KeyValuePair<string, ReportRow> row in sheet.Value.Rows)
                    {
                        foreach (ReportCell cell in row.Value.Cells)
                        {
                            cell.Clear();
                        }
                    }
                }
            }
        }

        public void Lock()
        {
            Monitor.Enter(ValueSheets);
        }

        public void Unlock()
        {
            Monitor.Exit(ValueSheets);
        }
    }

    public abstract class ReportSheet
    {
        public ReportSheet(TestContext context, string head1, string head2,
            float idDB, float idWB, EIndoorUse idUse, EIndoorMode idMode,
            float odDB, float odWB, EOutdoorUse odUse, EEtcUse odDp)
        {
            IndoorDB = idDB;
            IndoorWB = idWB;
            IndoorUse = idUse;
            IndoorMode = idMode;
            OutdoorDB = odDB;
            OutdoorWB = odWB;
            OutdoorUse = odUse;
            OutdoorDP = odDp;
            Rows = new Dictionary<string, ReportRow>();
            Initialize(context.Value, head1, head2);
        }

        public float IndoorDB { get; set; }
        public float IndoorWB { get; set; }
        public EIndoorUse IndoorUse { get; set; }
        public EIndoorMode IndoorMode { get; set; }
        public float OutdoorDB { get; set; }
        public float OutdoorWB { get; set; }
        public EOutdoorUse OutdoorUse { get; set; }
        public EEtcUse OutdoorDP { get; set; }
        public Dictionary<string, ReportRow> Rows { get; set; }
        public bool Enabled
        { get { return (Rows.Count == 0) ? false : true; } }

        protected abstract void Initialize(TestValue value, string head1, string head2);

        public void Set(
            float idDB, float idWB, EIndoorUse idUse, EIndoorMode idMode,
            float odDB, float odWB, EOutdoorUse odUse, EEtcUse odDp)
        {
            IndoorDB = idDB;
            IndoorWB = idWB;
            IndoorUse = idUse;
            IndoorMode = idMode;
            OutdoorDB = odDB;
            OutdoorWB = odWB;
            OutdoorUse = odUse;
            OutdoorDP = odDp;
        }

        public void RefreshData(int index)
        {
            foreach (KeyValuePair<string, ReportRow> row in Rows)
            {
                if (row.Value.Row != null)
                    row.Value.Cells[index].Raw = row.Value.Row.Raw;
                else
                    row.Value.Cells[index].StrValue = "";
            }
        }
    }

    public class ReportCalorieSheet : ReportSheet
    {
        public ReportCalorieSheet(TestContext context, string head1, string head2,
            float idDB, float idWB, EIndoorUse idUse, EIndoorMode idMode,
            float odDB, float odWB, EOutdoorUse odUse, EEtcUse odDp)
            : base(context, head1, head2, idDB, idWB, idUse, idMode, odDB, odWB, odUse, odDp)
        {
        }

        protected override void Initialize(TestValue value, string head1, string head2)
        {
            if (IndoorUse == EIndoorUse.NotUsed) return;

            if (IndoorMode == EIndoorMode.NotUsed)
            {
                Rows.Add("Total.Capacity", new ReportRow("324", null));
                Rows.Add("Total.Power", new ReportRow("325", value.Calcurated["Total.Power"]));
                Rows.Add("Total.EER_COP", new ReportRow("326", null));
                Rows.Add("Total.Capacity.Ratio", new ReportRow("327", null));
                Rows.Add("Total.Power.Ratio", new ReportRow("328", value.Calcurated["Total.Power.Ratio"]));
                Rows.Add("Total.EER_COP.Ratio", new ReportRow("329", null));

                Rows.Add("IDU.Power", new ReportRow("330", value.Calcurated[head1+".IDU.Power"]));
                Rows.Add("IDU.Voltage", new ReportRow("331", value.Calcurated[head1+".IDU.Voltage"]));
                Rows.Add("IDU.Current", new ReportRow("332", value.Calcurated[head1+".IDU.Current"]));
                Rows.Add("IDU.Frequency", new ReportRow("333", value.Calcurated[head1+".IDU.Frequency"]));
                Rows.Add("IDU.Power.Factor", new ReportRow("334", value.Calcurated[head1+".IDU.Power.Factor"]));

                Rows.Add("ODU.Power", new ReportRow("335", value.Calcurated[head1+".ODU.Power"]));
                Rows.Add("ODU.Voltage", new ReportRow("336", value.Calcurated[head1+".ODU.Voltage"]));
                Rows.Add("ODU.Current", new ReportRow("337", value.Calcurated[head1+".ODU.Current"]));
                Rows.Add("ODU.Frequency", new ReportRow("338", value.Calcurated[head1+".ODU.Frequency"]));
                Rows.Add("ODU.Power.Factor", new ReportRow("339", value.Calcurated[head1+".ODU.Power.Factor"]));

                Rows.Add("Capacity", new ReportRow("340", null));
                Rows.Add("Capacity.Ratio", new ReportRow("341", null));
                Rows.Add("Sensible.Heat", new ReportRow("342", null));
                Rows.Add("Latent.Heat", new ReportRow("343", null));
                Rows.Add("Sensible.Heat.Ratio", new ReportRow("344", null));
                Rows.Add("Heat.Leakage", new ReportRow("345", null));
                Rows.Add("Drain.Weight", new ReportRow("346", null));

                Rows.Add("Entering.DB", new ReportRow("347", value.Measured[head2+".Entering.DB"]));
                Rows.Add("Entering.WB", new ReportRow("348", value.Measured[head2+".Entering.WB"]));
                Rows.Add("Entering.RH", new ReportRow("349", value.Calcurated[head2+".Entering.RH"]));
                Rows.Add("Leaving.DB", new ReportRow("350", value.Measured[head2+".Leaving.DB"]));
                Rows.Add("Leaving.WB", new ReportRow("351", value.Measured[head2+".Leaving.WB"]));
                Rows.Add("Leaving.RH", new ReportRow("352", value.Calcurated[head2+".Leaving.RH"]));

                Rows.Add("Entering.Enthalpy", new ReportRow("353", null));
                Rows.Add("Leaving.Enthalpy", new ReportRow("354", null));
                Rows.Add("Entering.Humidity.Ratio", new ReportRow("355", null));
                Rows.Add("Leaving.Humidity.Ratio", new ReportRow("356", null));
                Rows.Add("Leaving.Specific.Heat", new ReportRow("357", null));
                Rows.Add("Leaving.Specific.Volume", new ReportRow("358", null));

                Rows.Add("Air.Flow.Lev", new ReportRow("359", null));
                Rows.Add("Static.Pressure", new ReportRow("360", null));
                Rows.Add("Nozzle.Diff.Pressure", new ReportRow("361", null));
                Rows.Add("Atm.Pressure", new ReportRow("362", null));
                Rows.Add("Nozzle.Inlet.Temp", new ReportRow("363", null));
                Rows.Add("Nozzle", new ReportRow("365", null));

                Rows.Add("OD.Entering.DB", new ReportRow("366", value.Measured["OD.Entering.DB"]));
                Rows.Add("OD.Entering.WB", new ReportRow("367", value.Measured["OD.Entering.WB"]));
                Rows.Add("OD.Entering.RH", new ReportRow("368", value.Calcurated["OD.Entering.RH"]));
                Rows.Add("OD.Entering.DP", new ReportRow("369", value.Measured["OD.Entering.DP"]));
            }
            else
            {
                Rows.Add("Total.Capacity", new ReportRow("324", value.Calcurated["Total.Capacity"]));
                Rows.Add("Total.Power", new ReportRow("325", value.Calcurated["Total.Power"]));
                Rows.Add("Total.EER_COP", new ReportRow("326", value.Calcurated["Total.EER_COP"]));
                Rows.Add("Total.Capacity.Ratio", new ReportRow("327", value.Calcurated["Total.Capacity.Ratio"]));
                Rows.Add("Total.Power.Ratio", new ReportRow("328", value.Calcurated["Total.Power.Ratio"]));
                Rows.Add("Total.EER_COP.Ratio", new ReportRow("329", value.Calcurated["Total.EER_COP.Ratio"]));

                Rows.Add("IDU.Power", new ReportRow("330", value.Calcurated[head1+".IDU.Power"]));
                Rows.Add("IDU.Voltage", new ReportRow("331", value.Calcurated[head1+".IDU.Voltage"]));
                Rows.Add("IDU.Current", new ReportRow("332", value.Calcurated[head1+".IDU.Current"]));
                Rows.Add("IDU.Frequency", new ReportRow("333", value.Calcurated[head1+".IDU.Frequency"]));
                Rows.Add("IDU.Power.Factor", new ReportRow("334", value.Calcurated[head1+".IDU.Power.Factor"]));

                Rows.Add("ODU.Power", new ReportRow("335", value.Calcurated[head1+".ODU.Power"]));
                Rows.Add("ODU.Voltage", new ReportRow("336", value.Calcurated[head1+".ODU.Voltage"]));
                Rows.Add("ODU.Current", new ReportRow("337", value.Calcurated[head1+".ODU.Current"]));
                Rows.Add("ODU.Frequency", new ReportRow("338", value.Calcurated[head1+".ODU.Frequency"]));
                Rows.Add("ODU.Power.Factor", new ReportRow("339", value.Calcurated[head1+".ODU.Power.Factor"]));

                Rows.Add("Capacity", new ReportRow("341", value.Calcurated[head2+".Capacity"]));
                Rows.Add("Capacity.Ratio", new ReportRow("394", value.Calcurated[head2+".Capacity.Ratio"]));
                Rows.Add("Sensible.Heat", new ReportRow("342", value.Calcurated[head2+".Sensible.Heat"]));
                Rows.Add("Latent.Heat", new ReportRow("343", value.Calcurated[head2+".Latent.Heat"]));
                Rows.Add("Sensible.Heat.Ratio", new ReportRow("344", value.Calcurated[head2+".Sensible.Heat.Ratio"]));
                Rows.Add("Heat.Leakage", new ReportRow("345", value.Calcurated[head2+".Heat.Leakage"]));
                Rows.Add("Drain.Weight", new ReportRow("346", value.Calcurated[head2+".Drain.Weight"]));

                Rows.Add("Entering.DB", new ReportRow("347", value.Measured[head2+".Entering.DB"]));
                Rows.Add("Entering.WB", new ReportRow("348", value.Measured[head2+".Entering.WB"]));
                Rows.Add("Entering.RH", new ReportRow("349", value.Calcurated[head2+".Entering.RH"]));
                Rows.Add("Leaving.DB", new ReportRow("350", value.Measured[head2+".Leaving.DB"]));
                Rows.Add("Leaving.WB", new ReportRow("351", value.Measured[head2+".Leaving.WB"]));
                Rows.Add("Leaving.RH", new ReportRow("352", value.Calcurated[head2+".Leaving.RH"]));

                Rows.Add("Entering.Enthalpy", new ReportRow("353", value.Calcurated[head2+".Entering.Enthalpy"]));
                Rows.Add("Leaving.Enthalpy", new ReportRow("354", value.Calcurated[head2+".Leaving.Enthalpy"]));
                Rows.Add("Entering.Humidity.Ratio", new ReportRow("355", value.Calcurated[head2+".Entering.Humidity.Ratio"]));
                Rows.Add("Leaving.Humidity.Ratio", new ReportRow("356", value.Calcurated[head2+".Leaving.Humidity.Ratio"]));
                Rows.Add("Leaving.Specific.Heat", new ReportRow("357", value.Calcurated[head2+".Leaving.Specific.Heat"]));
                Rows.Add("Leaving.Specific.Volume", new ReportRow("358", value.Calcurated[head2+".Leaving.Specific.Volume"]));

                Rows.Add("Air.Flow.Lev", new ReportRow("359", value.Calcurated[head2+".Air.Flow.Lev"]));
                Rows.Add("Static.Pressure", new ReportRow("360", value.Measured[head2+".Static.Pressure"]));
                Rows.Add("Nozzle.Diff.Pressure", new ReportRow("361", value.Measured[head2+".Nozzle.Diff.Pressure"]));
                Rows.Add("Atm.Pressure", new ReportRow("362", value.Measured[head1+".Atm.Pressure"]));
                Rows.Add("Nozzle.Inlet.Temp", new ReportRow("363", value.Measured[head2+".Nozzle.Inlet.Temp"]));
                //Rows.Add("Nozzle", new ReportRow("365", null));

                Rows.Add("OD.Entering.DB", new ReportRow("366", value.Measured["OD.Entering.DB"]));
                Rows.Add("OD.Entering.WB", new ReportRow("367", value.Measured["OD.Entering.WB"]));
                Rows.Add("OD.Entering.RH", new ReportRow("368", value.Calcurated["OD.Entering.RH"]));
                Rows.Add("OD.Entering.DP", new ReportRow("369", value.Measured["OD.Entering.DP"]));
            }
        }
    }

    public class ReportThermoSheet : ReportSheet
    {
        public ReportThermoSheet(TestContext context, string head1, string head2,
            float idDB, float idWB, EIndoorUse idUse, EIndoorMode idMode,
            float odDB, float odWB, EOutdoorUse odUse, EEtcUse odDp)
            : base(context, head1, head2, idDB, idWB, idUse, idMode, odDB, odWB, odUse, odDp)
        {
        }

        protected override void Initialize(TestValue value, string head1, string head2)
        {
            if (IndoorMode == EIndoorMode.NotUsed) return;

            for (int i = 0; i < 60; i++)
            {
                Rows.Add($"TC {i + 1:d2}", new ReportRow($"{525 + i}", value.Measured[head1+$".TC.{i + 1:d3}"]));
            }
        }
    }

    public class ReportRow
    {
        public ReportRow(string tag, ValueRow row, int count = 7)
        {
            Tag = tag;
            Row = row;

            if (count > 7) count = 7;
            count++;

            string format = (Row == null) ? "" : Row.Format;

            Cells = new List<ReportCell>();
            for (int i = 0; i < count; i++)
            {
                Cells.Add(new ReportCell($"{Tag}-{i + 1}", 0, format));
            }
        }

        public string Tag { get; }
        public ValueRow Row { get; }
        public List<ReportCell> Cells { get; }
        public float Average
        {
            get
            {
                if (Row == null) return 0;

                int i = 0;
                float sum = 0;
                float fValue = 0;

                foreach (ReportCell cell in Cells)
                {
                    if (float.TryParse(cell.Value, out fValue) == true)
                    {
                        sum += fValue;
                        i++;
                    }
                }

                return (i == 0) ? 0 : (sum / i);
            }
        }
        public int Count { get { return Cells.Count; } }
    }

    public class ReportCell
    {
        public ReportCell(string tag, float value, string format, string strValue = "")
        {
            Tag = tag;
            Raw = value;
            Format = format;
            StrValue = strValue;
        }

        public string Tag { get; }
        public float Raw { get; set; }
        public string Value
        {
            get
            {
                if (StrValue != "") return StrValue;
                if (Format == "") return "";
                if (Raw == 0) return "";

                return Raw.ToString(Format);
            }
        }
        public string Format { get; }
        public string StrValue { get; set; }

        public void Clear()
        {
            Raw = 0;
            StrValue = "";
        }
    }
    #endregion
}
