using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using DevExpress.Utils;
using DevExpress.Utils.DragDrop;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;

using Ulee.Controls;
using Ulee.Device.Connection.Yokogawa;
using Ulee.Utils;

namespace Hnc.Calorimeter.Client
{
    public partial class CtrlTestCondition : UlUserControlEng
    {
        public CtrlTestCondition(TestContext context)
        {
            initialized = false;

            InitializeComponent();
            this.context = context;
            Initialize();

            initialized = true;
        }

        private TestContext context;

        private bool initialized;

        private void Initialize()
        {
            Color evenColor = Color.FromArgb(244, 244, 236);

            NameValue<EIndoorUse>[] inUseItems = EnumHelper.GetNameValues<EIndoorUse>();
            scheduleIDUseLookUp.DataSource = inUseItems;
            scheduleIDUseLookUp.DisplayMember = "Name";
            scheduleIDUseLookUp.ValueMember = "Value";
            scheduleIDUseLookUp.KeyMember = "Value";

            NameValue<EIndoorMode>[] modeItems = EnumHelper.GetNameValues<EIndoorMode>();
            scheduleIDModeLookUp.DataSource = modeItems;
            scheduleIDModeLookUp.DisplayMember = "Name";
            scheduleIDModeLookUp.ValueMember = "Value";
            scheduleIDModeLookUp.KeyMember = "Value";

            NameValue<EIndoorDuct>[] ductItems = EnumHelper.GetNameValues<EIndoorDuct>();
            scheduleIDDuctLookUp.DataSource = ductItems;
            scheduleIDDuctLookUp.DisplayMember = "Name";
            scheduleIDDuctLookUp.ValueMember = "Value";
            scheduleIDDuctLookUp.KeyMember = "Value";

            NameValue<EOutdoorUse>[] outUseItems = EnumHelper.GetNameValues<EOutdoorUse>();
            scheduleODUseLookUp.DataSource = outUseItems;
            scheduleODUseLookUp.DisplayMember = "Name";
            scheduleODUseLookUp.ValueMember = "Value";
            scheduleODUseLookUp.KeyMember = "Value";

            NameValue<EEtcUse>[] etcUseItems = EnumHelper.GetNameValues<EEtcUse>();
            scheduleEtcUseLookUp.DataSource = etcUseItems;
            scheduleEtcUseLookUp.DisplayMember = "Name";
            scheduleEtcUseLookUp.ValueMember = "Value";
            scheduleEtcUseLookUp.KeyMember = "Value";

            scheduleGrid.DataSource = context.Condition.Schedules;
            scheduleGridView.Appearance.EvenRow.BackColor = evenColor;
            scheduleGridView.OptionsView.EnableAppearanceEvenRow = true;

            thermo1Grid.DataSource = context.Condition.TC1;
            thermo1GridView.Appearance.EvenRow.BackColor = evenColor;
            thermo1GridView.OptionsView.EnableAppearanceEvenRow = true;

            thermo2Grid.DataSource = context.Condition.TC2;
            thermo2GridView.Appearance.EvenRow.BackColor = evenColor;
            thermo2GridView.OptionsView.EnableAppearanceEvenRow = true;

            thermo3Grid.DataSource = context.Condition.TC3;
            thermo3GridView.Appearance.EvenRow.BackColor = evenColor;
            thermo3GridView.OptionsView.EnableAppearanceEvenRow = true;

            thermoTagGrid.DataSource = context.Condition.ThermocoupleNames;
            thermoTagGridView.Appearance.EvenRow.BackColor = evenColor;
            thermoTagGridView.OptionsView.EnableAppearanceEvenRow = true;

            pressureGrid.DataSource = context.Condition.Pressures;
            pressureGridView.Appearance.EvenRow.BackColor = evenColor;
            pressureGridView.OptionsView.EnableAppearanceEvenRow = true;

            pressureTagGrid.DataSource = context.Condition.PressureNames;
            pressureTagGridView.Appearance.EvenRow.BackColor = evenColor;
            pressureTagGridView.OptionsView.EnableAppearanceEvenRow = true;

            NameValue<ETestMode>[] testModeItems = EnumHelper.GetNameValues<ETestMode>();
            methodTestModeCombo.DataSource = testModeItems;
            methodTestModeCombo.DisplayMember = "Name";
            methodTestModeCombo.ValueMember = "Value";

            NameValue<EUnitCapacity>[] capaItems = EnumHelper.GetNameValues<EUnitCapacity>();
            methodCapaUnitCombo.DataSource = capaItems;
            methodCapaUnitCombo.DisplayMember = "Name";
            methodCapaUnitCombo.ValueMember = "Value";

            NameValue<EUnitAirFlow>[] airItems = EnumHelper.GetNameValues<EUnitAirFlow>();
            methodAirFlowUnitCombo.DataSource = airItems;
            methodAirFlowUnitCombo.DisplayMember = "Name";
            methodAirFlowUnitCombo.ValueMember = "Value";

            NameValue<EUnitEnthalpy>[] enItems = EnumHelper.GetNameValues<EUnitEnthalpy>();
            methodEnthalpyUnitCombo.DataSource = enItems;
            methodEnthalpyUnitCombo.DisplayMember = "Name";
            methodEnthalpyUnitCombo.ValueMember = "Value";

            NameValue<EUnitPressure>[] pressItems = EnumHelper.GetNameValues<EUnitPressure>();
            methodPressureUnitCombo.DataSource = pressItems;
            methodPressureUnitCombo.DisplayMember = "Name";
            methodPressureUnitCombo.ValueMember = "Value";

            NameValue<EUnitTemperature>[] tempItems = EnumHelper.GetNameValues<EUnitTemperature>();
            methodTempUnitCombo.DataSource = tempItems;
            methodTempUnitCombo.DisplayMember = "Name";
            methodTempUnitCombo.ValueMember = "Value";

            NameValue<EUnitDiffPressure>[] diffItems = EnumHelper.GetNameValues<EUnitDiffPressure>();
            methodDiffPressureUnitCombo.DataSource = diffItems;
            methodDiffPressureUnitCombo.DisplayMember = "Name";
            methodDiffPressureUnitCombo.ValueMember = "Value";

            NameValue<EUnitAtmPressure>[] atmItems = EnumHelper.GetNameValues<EUnitAtmPressure>();
            methodAtmPressureUnitCombo.DataSource = atmItems;
            methodAtmPressureUnitCombo.DisplayMember = "Name";
            methodAtmPressureUnitCombo.ValueMember = "Value";

            foreach (TabPage page in ratedTab.TabPages)
            {
                EConditionRated index = (EConditionRated)int.Parse(page.Tag.ToString());
                CtrlTestRated ctrl = new CtrlTestRated(index);

                ctrl.CalcCapacity += DoCalcCapacity;
                ctrl.freqCombo.SelectedIndex = 1;

                NameValue<EWT330Wiring>[] wiringItems = EnumHelper.GetNameValues<EWT330Wiring>();
                ctrl.phaseCombo.DataSource = wiringItems;
                ctrl.phaseCombo.DisplayMember = "Name";
                ctrl.phaseCombo.ValueMember = "Value";
                ctrl.phaseCombo.SelectedValue = EWT330Wiring.P3W4;

                ctrl.powerMeterCombo.Items.Clear();
                foreach (PowerMeterRow<float> row in Resource.Client.Devices.PowerMeter.Rows)
                {
                    ctrl.powerMeterCombo.Items.Add(row.Name);
                }
                ctrl.powerMeterCombo.SelectedIndex = 0;

                page.Controls.Add(ctrl);
            }

            schAddButton_Click(null, null);
        }

        private void DoCalcCapacity(object sender, EventArgs e)
        {
            if (((CtrlTestRated)sender).Index == EConditionRated.Total) return;

            RecalcTotalRatedCondition();
        }

        private void CtrlTestCondition_Load(object sender, EventArgs e)
        {
            methodAirFlowUnitCombo.SelectedValue = EUnitAirFlow.CMM;
            methodAirFlowUnitCombo_SelectedValueChanged(null, null);

            methodPressureUnitCombo.SelectedValue = EUnitPressure.Bar;
            methodPressureUnitCombo_SelectedValueChanged(null, null);

            methodAtmPressureUnitCombo.SelectedValue = EUnitAtmPressure.mmHg;
            methodAtmPressureUnitCombo_SelectedValueChanged(null, null);

            methodDiffPressureUnitCombo.SelectedValue = EUnitDiffPressure.mmAq;
            methodDiffPressureUnitCombo_SelectedValueChanged(null, null);

            methodTempUnitCombo.SelectedValue = EUnitTemperature.Celsius;
            methodTempUnitCombo_SelectedValueChanged(null, null);

            methodCapaUnitCombo.SelectedValue = EUnitCapacity.kcal;
            methodCapaUnitCombo_SelectedValueChanged(null, null);

            methodEnthalpyUnitCombo.SelectedValue = EUnitEnthalpy.kcal;
            methodEnthalpyUnitCombo_SelectedValueChanged(null, null);
        }

        private void CtrlTestCondition_Leave(object sender, EventArgs e)
        {
            context.Condition.Method.Mode = (ETestMode)methodTestModeCombo.SelectedValue;
            context.Condition.Method.IntegralCount = (int)methodIntegralCountEdit.Value;
            context.Condition.Method.IntegralTime = (int)methodIntegralTimeEdit.Value;
            context.Condition.Method.ScanTime = (int)methodScanTimeEdit.Value;
            context.Condition.Method.Capacity = (EUnitCapacity)methodCapaUnitCombo.SelectedValue;
            context.Condition.Method.AirFlow = (EUnitAirFlow)methodAirFlowUnitCombo.SelectedValue;
            context.Condition.Method.Enthalpy = (EUnitEnthalpy)methodEnthalpyUnitCombo.SelectedValue;
            context.Condition.Method.Pressure = (EUnitPressure)methodPressureUnitCombo.SelectedValue;
            context.Condition.Method.DiffPressure = (EUnitDiffPressure)methodCapaUnitCombo.SelectedValue;
            context.Condition.Method.AtmPressure = (EUnitAtmPressure)methodCapaUnitCombo.SelectedValue;
            context.Condition.Method.AutoControllerSetting = methodAutoCtrlSetCheck.Checked;
            context.Condition.Method.UsePowerMeterIntegral = methodUsePmIntegCheck.Checked;

            RecalcTotalRatedCondition();

            // Rated Condition
            foreach (TabPage page in ratedTab.TabPages)
            {
                EConditionRated index = (EConditionRated)int.Parse(page.Tag.ToString());
                ConditionRated rated = context.Condition.Rateds[index];
                CtrlTestRated ctrl = (CtrlTestRated)page.Controls[0];

                rated.Capacity = float.Parse(ctrl.capacityEdit.Text);
                rated.PowerInput = float.Parse(ctrl.PowerInEdit.Text);
                rated.EER_COP = float.Parse(ctrl.eepEdit.Text);
                rated.Voltage = float.Parse(ctrl.voltEdit.Text);
                rated.Current = float.Parse(ctrl.currentEdit.Text);
                rated.Wiring = (EWT330Wiring)ctrl.phaseCombo.SelectedValue;

                try
                {
                    rated.Frequency = float.Parse(ctrl.freqCombo.Text);
                }
                catch
                {
                    rated.Frequency = 0;
                }

                rated.PowerMeter = ctrl.powerMeterCombo.SelectedIndex;
            }

            // Note
            context.Condition.Note.Company = noteCompanyEdit.Text;
            context.Condition.Note.Name = noteTestNameEdit.Text;
            context.Condition.Note.No = noteTestNoEdit.Text;
            context.Condition.Note.Observer = noteObserverEdit.Text;
            context.Condition.Note.Maker = noteMakerCombo.Text;
            context.Condition.Note.Model1 = noteModel1Combo.Text;
            context.Condition.Note.Serial1 = noteSerial1Combo.Text;
            context.Condition.Note.Model2 = noteModel2Edit.Text;
            context.Condition.Note.Serial2 = noteSerial2Edit.Text;
            context.Condition.Note.Model3 = noteModel3Edit.Text;
            context.Condition.Note.Serial3 = noteSerial3Edit.Text;
            context.Condition.Note.ExpDevice = noteExpDeviceEdit.Text;
            context.Condition.Note.Refrigerant = noteRefrigerantCombo.Text;
            context.Condition.Note.RefCharge = noteRefChargeEdit.Text;
            context.Condition.Note.Memo = noteMemoEdit.Text;

        }

        #region scheduleGrid Events
        private void scheduleGridView_CustomDrawBandHeader(object sender, BandHeaderCustomDrawEventArgs e)
        {
            if (e.Band == null) return;

            if (e.Band.AppearanceHeader.BackColor != Color.Empty)
            {
                e.Info.AllowColoring = true;
            }
        }

        private void scheduleGridView_CustomDrawColumnHeader(object sender, ColumnHeaderCustomDrawEventArgs e)
        {
            if (e.Column == null) return;

            if (e.Column.AppearanceHeader.BackColor != Color.Empty)
            {
                e.Info.AllowColoring = true;
            }
        }

        private void scheduleGridView_CellValueChanging(object sender, CellValueChangedEventArgs e)
        {
            AdvBandedGridView view = sender as AdvBandedGridView;

            switch (e.Column.FieldName)
            {
                case "Indoor1Use":
                    if ((EIndoorUse)e.Value == EIndoorUse.NotUsed)
                    {
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Mode1"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Duct1"], EIndoorDuct.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Mode2"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor1Duct2"], EIndoorDuct.NotUsed);
                    }
                    break;

                case "Indoor2Use":
                    if ((EIndoorUse)e.Value == EIndoorUse.NotUsed)
                    {
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Mode1"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Duct1"], EIndoorDuct.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Mode2"], EIndoorMode.NotUsed);
                        view.SetRowCellValue(e.RowHandle, view.Columns["Indoor2Duct2"], EIndoorDuct.NotUsed);
                    }
                    break;
            }
        }

        private void scheduleIDModeLookUp_EditValueChanging(object sender, ChangingEventArgs e)
        {
            GridColumn column = scheduleGridView.FocusedColumn;

            switch (column.FieldName)
            {
                case "Indoor1Mode1":
                case "Indoor1Duct1":
                case "Indoor1Mode2":
                case "Indoor1Duct2":
                    if ((EIndoorUse)scheduleGridView.GetRowCellValue(
                        scheduleGridView.FocusedRowHandle, 
                        scheduleGridView.Columns["Indoor1Use"]) 
                        == EIndoorUse.NotUsed)
                    {
                        e.Cancel = true;
                    }
                    else
                    {
                        e.Cancel = false;
                    }
                    break;

                case "Indoor2Mode1":
                case "Indoor2Duct1":
                case "Indoor2Mode2":
                case "Indoor2Duct2":
                    if ((EIndoorUse)scheduleGridView.GetRowCellValue(
                        scheduleGridView.FocusedRowHandle, 
                        scheduleGridView.Columns["Indoor2Use"])
                        == EIndoorUse.NotUsed)
                    {
                        e.Cancel = true;
                    }
                    else
                    {
                        e.Cancel = false;
                    }
                    break;
            }
        }
        #endregion

        #region Buttons event
        private void schAddButton_Click(object sender, EventArgs e)
        {
            context.Condition.Schedules.Add(new ConditionSchedule(context.Condition.Schedules.Count + 1));
            scheduleGridView.RefreshData();
        }

        private void schDeleteButton_Click(object sender, EventArgs e)
        {
            if (scheduleGridView.FocusedRowHandle < 1) return;

            scheduleGridView.DeleteRow(scheduleGridView.FocusedRowHandle);
            for (int i=0; i< context.Condition.Schedules.Count; i++)
            {
                context.Condition.Schedules[i].No = i + 1;
            }
            scheduleGridView.RefreshData();
        }
        #endregion

        #region Method event
        private void methodTestModeCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (scheduleGridView.FocusedRowHandle < 0) return;

            EIndoorMode mode = (EIndoorMode)methodTestModeCombo.SelectedValue;

            for (int i = 0; i < scheduleGridView.RowCount; i++)
            {
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor1Mode1"], mode);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor1Duct1"], EIndoorDuct.N1);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor1Mode2"], mode);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor1Duct2"], EIndoorDuct.N1);

                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor2Mode1"], mode);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor2Duct1"], EIndoorDuct.N1);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor2Mode2"], mode);
                scheduleGridView.SetRowCellValue(i, scheduleGridView.Columns["Indoor2Duct2"], EIndoorDuct.N1);
            }
        }

        private void methodCapaUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodCapaUnitCombo.SelectedValue;
            string sUnit = methodCapaUnitCombo.Text;

            SetRatedConditionUnit(ETestRatedField.Capacity, sUnit);
            SetRatedConditionUnit(ETestRatedField.EER_COP, EnumHelper.GetNames<EUnitEER_COP>()[nUnit]);

            context.Value.SetUnitTo(EUnitType.Capacity, nUnit);
            context.Value.SetUnitTo(EUnitType.EER_COP, nUnit);
        }

        private void methodAirFlowUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodAirFlowUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.AirFlow, (int)methodAirFlowUnitCombo.SelectedValue);
        }

        private void methodEnthalpyUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodEnthalpyUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.Enthalpy, (int)methodEnthalpyUnitCombo.SelectedValue);
            context.Value.SetUnitTo(EUnitType.Heat, (int)methodCapaUnitCombo.SelectedValue);
        }

        private void methodPressureUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int sUnit = (int)methodPressureUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.Pressure, (int)methodPressureUnitCombo.SelectedValue);
        }

        private void methodTempUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodTempUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.Temperature, (int)methodTempUnitCombo.SelectedValue);
        }

        private void methodDiffPressureUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodDiffPressureUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.DiffPressure, (int)methodDiffPressureUnitCombo.SelectedValue);
        }

        private void methodAtmPressureUnitCombo_SelectedValueChanged(object sender, EventArgs e)
        {
            if (initialized == false) return;

            int nUnit = (int)methodAtmPressureUnitCombo.SelectedValue;

            context.Value.SetUnitTo(EUnitType.AtmPressure, (int)methodAtmPressureUnitCombo.SelectedValue);
        }
        #endregion

        private void RecalcTotalRatedCondition()
        {
            CtrlTestRated totalCtrl = (CtrlTestRated)ratedTab.TabPages[(int)EConditionRated.Total].Controls[0];

            double capacity = 0;
            double power = 0;

            foreach (TabPage page in ratedTab.TabPages)
            {
                EConditionRated index = (EConditionRated)int.Parse(page.Tag.ToString());

                if (index != EConditionRated.Total)
                {
                    CtrlTestRated ctrl = (CtrlTestRated)page.Controls[0];

                    capacity += double.Parse(ctrl.capacityEdit.Text);
                    power += double.Parse(ctrl.PowerInEdit.Text);
                }
            }

            totalCtrl.capacityEdit.EditValue = capacity;
            totalCtrl.PowerInEdit.EditValue = power;

            if (power == 0.0)
                totalCtrl.eepEdit.EditValue = 0.0;
            else
                totalCtrl.eepEdit.EditValue = capacity / power;
        }

        private void SetRatedConditionUnit(ETestRatedField index, string unit)
        {
            foreach (TabPage page in ratedTab.TabPages)
            {
                CtrlTestRated ctrl = (CtrlTestRated)page.Controls[0];
                ctrl.SetUnit(index, unit);
            }
        }

        #region Drag & Drop Events
        private void thermo1DragDropEvents_DragDrop(object sender, DragDropEventArgs e)
        {
            int sourceRow = ((int[])e.Data)[0];

            GridView sourceView = e.Source as GridView;
            GridView targetView = e.Target as GridView;

            GridHitInfo hit = targetView.CalcHitInfo(
                targetView.GridControl.PointToClient(new Point(e.Location.X, e.Location.Y)));

            if (hit.InRowCell == true)
            {
                if (sourceView.Name == thermoTagGridView.Name)
                {
                    targetView.SetRowCellValue(hit.RowHandle, targetView.Columns["Value"],
                        sourceView.GetRowCellValue(sourceRow, sourceView.Columns["Value"]).ToString());
                }
            }

            e.Handled = true;
        }

        private void thermo1DragDropEvents_DragEnter(object sender, DragEnterEventArgs e)
        {
        }

        private void thermo1DragDropEvents_DragLeave(object sender, DragLeaveEventArgs e)
        {
            //e.Cursor = DragAndDropCursors.NoneEffectCursor;
            //e.Handled = true;
        }

        private void thermo1DragDropEvents_DragOver(object sender, DragOverEventArgs e)
        {
            GridView sourceView = e.Source as GridView;

            if (sourceView.Name == thermoTagGridView.Name)
            {
                DragOverGridEventArgs args = DragOverGridEventArgs.GetDragOverGridEventArgs(e);
                e.Cursor = DragAndDropCursors.CopyEffectCursor;
                args.Handled = true;
            }
        }

        private void thermo2DragDropEvents_DragDrop(object sender, DragDropEventArgs e)
        {
            thermo1DragDropEvents_DragDrop(sender, e);
        }

        private void thermo2DragDropEvents_DragOver(object sender, DragOverEventArgs e)
        {
            thermo1DragDropEvents_DragOver(sender, e);
        }

        private void thermo3DragDropEvents_DragDrop(object sender, DragDropEventArgs e)
        {
            thermo1DragDropEvents_DragDrop(sender, e);
        }

        private void thermo3DragDropEvents_DragOver(object sender, DragOverEventArgs e)
        {
            thermo1DragDropEvents_DragOver(sender, e);
        }

        private void pressureDragDropEvents_DragDrop(object sender, DragDropEventArgs e)
        {
            int sourceRow = ((int[])e.Data)[0];

            GridView sourceView = e.Source as GridView;
            GridView targetView = e.Target as GridView;

            GridHitInfo hit = targetView.CalcHitInfo(
                targetView.GridControl.PointToClient(new Point(e.Location.X, e.Location.Y)));

            if (hit.InRowCell == true)
            {
                if (sourceView.Name == pressureTagGridView.Name)
                {
                    targetView.SetRowCellValue(hit.RowHandle, targetView.Columns["Value"],
                        sourceView.GetRowCellValue(sourceRow, sourceView.Columns["Value"]).ToString());
                }
            }

            e.Handled = true;
        }

        private void pressureDragDropEvents_DragOver(object sender, DragOverEventArgs e)
        {
            GridView sourceView = e.Source as GridView;

            if (sourceView.Name == pressureTagGridView.Name)
            {
                DragOverGridEventArgs args = DragOverGridEventArgs.GetDragOverGridEventArgs(e);
                e.Cursor = DragAndDropCursors.CopyEffectCursor;
                args.Handled = true;
            }
        }
        #endregion
    }
}
